
Функции
=========

Вызовы функций
--------------

\index{function call}

В контексте программирования *функция*  - это именованная последовательность операторов,
выполняющая какие-либо действия. Когда вы определяете функцию, вы указываете ее имя и
последовательность операторов. Позже вы можете "вызывать" функцию по ее имени. 
Мы уже встречались с примерами *вызова функции*:

~~~~ {.python}
>>> type(32)
<class 'int'>
~~~~

Имя функции -  `type`. Выражение в скобках называется *аргументом* функции.
Аргумент - это значение или переменная, которые передаются на вход функции.
Результатом работы функции `type` будет являться вывод типа аргумента.

\index{parentheses!argument in}

Принято говорить, что функция "принимает" аргумент и "возвращает" результат.
Результат назывется *возвращаемым значением*.

\index{argument}
\index{return value}

Встроенные функции
------------------

Python обладает набором важных встроенных функций, которые мы можем использовать
без необходимости их определения. Создатели Python написали набор функций для 
решения типовых проблем и включили их в Python, чтобы мы могли ими пользоваться.

Функции `max` и `min` возвращают мкксимальный и минимальный элементы в списке:

~~~~ {.python}
>>> max('Hello world')
'w'
>>> min('Hello world')
' '
>>>
~~~~

Функция `max` говорит нам, что "максимальный символ" в строке - буква "w", а
функция `min` возвращает нам наименьший символ (в данном случае символ пробела).

Другая, широко используемая функция -  `len`, которая возвращает длину аргумента. 
Если аргументом для `len` является строка, то функция вовратит количество символов в строке.

~~~~ {.python}
>>> len('Hello world')
11
>>>
~~~~

Данные функции применимы не только к строкам. Они могут использоваться на любом наборе значений, что мы и 
увидим в дальнейших главах этой книги.

К именам встроенных функций следует относиться точно так же, как к зарезервированным словам - 
необходимо избегать их использования в качестве имен переменных.

Функции преобразования типов
-------------------------

\index{conversion!type}
\index{type conversion}

Python также имеет встроенные функции, которые позволяют преобразовать значение из одного типа в другой.
Функция `int` принимает любое значение и преобразовывает его в целое число, если это возможно, 
в противном случае - выдает ошибку:

\index{int function}
\index{function!int}

~~~~ {.python}
>>> int('32')
32
>>> int('Hello')
ValueError: invalid literal for int() with base 10: 'Hello'
~~~~

`int` может конвертировать вещественные значения в целые, при этом не происходит округления,
от числа просто убирается его дробная часть:

~~~~ {.python}
>>> int(3.99999)
3
>>> int(-2.3)
-2
~~~~

`float` преобразует целыен числа и строки в вещественные числа:

\index{float function}
\index{function!float}

~~~~ {.python}
>>> float(32)
32.0
>>> float('3.14159')
3.14159
~~~~

И, наконец, `str` преобразует свой аругмент в строковое значение:

\index{str function}
\index{function!str}

~~~~ {.python}
>>> str(32)
'32'
>>> str(3.14159)
'3.14159'
~~~~

Математические функции
--------------

\index{math function}
\index{function, math}
\index{module}
\index{module object}

В состав Python входит модуль `math`, который предоставляет наиболее распространенные 
математические функции. Перед использованием, его необходимо подключить:

~~~~ {.python}
>>> import math
~~~~

Данная команда создает *объект модуля* по имени math. Если попытаться вывести его 
через команду print:

~~~~ {.python}
>>> print(math)
<module 'math' (built-in)>
~~~~

Объект модуля содержит функции и переменные определенные в модуле.
Для того, чтобы получить доступ к одной из функций, необходимо указать
имя модуля и имя функции, разделенные точками. Такой формат называется *точечной нотацией*.

\index{dot notation}

~~~~ {.python}
>>> ratio = signal_power / noise_power
>>> decibels = 10 * math.log10(ratio)

>>> radians = 0.7
>>> height = math.sin(radians)
~~~~

В первом примере вычисляется логарифм по основанию 10 от соотношения сигнал/шум.
 В модуле math также содержится функция `log`, которая вычисляет логарифм по основанию е.

\index{log function}
\index{function!log}
\index{sine function}
\index{radian}
\index{trigonometric function}
\index{function, trigonometric}

Во втором примере находится значение синуса в радианах. Имя переменной является
намеком на то, что `sin` и другие тригонометрические функции (`cos`, `tan`, etc.) 
принимают аргументы в радианах. Для перехода от градусов к радианам необходимо значение в градусах разделить 
на 360 и умножить на 2 \pi$:

~~~~ {.python}
>>> degrees = 45
>>> radians = degrees / 360.0 * 2 * math.pi
>>> math.sin(radians)
0.7071067811865476
~~~~

Выражение `math.pi` берет значение переменной `pi` из модуля math. 
Значением данной переменной является число $\pi$, взятое с точностью до 15 знаков после запятой.

\index{pi}

Если вы разбираетесь в тригонометрии, вы можете проверить предыдущий результат, сравнив 
значение с результатом от квадратного корня из 2, деленного на 2:

\index{sqrt function}
\index{function!sqrt}

~~~~ {.python}
>>> math.sqrt(2) / 2.0
0.7071067811865476
~~~~

Случайные числа
--------------

\index{random number}
\index{number, random}
\index{deterministic}
\index{pseudorandom}

При введении одних и тех же данных компьюетры выдают одни и те же ответы,
поэтому их пожно назвать *детерминированными*
Детеринизм, обычно вещб хорошая, так как мы ожидаем от одних и тех же вычислений 
один и тот же результат. Для некоторых же приложений мы хотим, чтобы компьютер вел себя
непредсказуем. Самый лучший пример - игры, но существуют и другие варианты.

Сделать программу реально непредсказуемой - задача не из легких, но существуют способы
затавить их выглядеть менее предсказуемыми. Один из таких способов - использовние *алгоритомов*,
которые генерируют *псевдослучайные* числа. Такие числа не являются истинно случайными, так они генерируются 
вполне себе детериминированными вычислениями. Но если просто посмотреть на такие числа - их весьма 
трудо отличить от случайных.

\index{random module}
\index{module!random}

Модуль `random` предоставляет функции, которые генерируют псевдослучайные числа (для простоты я их буду называть просто
случайными *прим. автора*).

\index{random function}
\index{function!random}

Функция `random` возвращает вещественное число в диапазоне между  0.0 и 
1.0 (включая 0.0 и не включая 1.0). При каждом вызове `random`,
вы ьбудете получать следующее число. Чтобы это увидеть, просто запустите этот цикл:

~~~~ {.python}
import random

for i in range(10):
    x = random.random()
    print(x)
~~~~

Данная программа генерирует список из 10 случайных чисел в диапазоне от 0.0 и до (но не включая) 1.0.

~~~~
0.11132867921152356
0.5950949227890241
0.04820265884996877
0.841003109276478
0.997914947094958
0.04842330803368111
0.7416295948208405
0.510535245390327
0.27447040171978143
0.028511805472785867
~~~~

**Упражнение 1: Запустите программу у себя и посмотрите, какие значения она выводит.
Запускайте программу несколько раз и посмотрите, какие результаты она выдает.**

Функция `random` всего лишь одна из многих фнукций для манипуляции со случайными числами. 
Функция `randint` принимает два параметра  в диапазоне от `low` до `high` и возвращает целое число из этого 
диапазона (включая сами low` и`high`).

\index{randint function}
\index{function!randint}

~~~~ {.python}
>>> random.randint(5, 10)
5
>>> random.randint(5, 10)
9
~~~~

Для того, чтобы выбрать случайный элесент из существующего набора данных, вы можете использовать
функцию `choice`:

\index{choice function}
\index{function!choice}

~~~~ {.python}
>>> t = [1, 2, 3]
>>> random.choice(t)
2
>>> random.choice(t)
3
~~~~

Модуль `random` также предоставляет функции для генерации случайных значений в непрерывных распределениях,
включая гауссово, экспоненциальное, гамма и некоторые другие.

Добавление новых функций
--------------------

Итак, мы до настоящего момента использовали только встроенные функции Python, но
также существует возможность содавать новые функции. *Определение функции*
указывает имя новой функции и последовательность операторов, которые выполняются при вызове 
данной функции. Однажды определив функцию, мы можем в дальнейшем неоднократно использовать 
ее в теле своей программы.

\index{function}
\index{function definition}
\index{definition!function}

Вот пример:

~~~~ {.python}
def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print('I sleep all night and I work all day.')
~~~~

`def` является ключевым словом, указывающим на то, что это определение функции. 
Именем функции является `print_lyrics`. Правила именования функций являются точно 
такими же, как и у переменных: буквы, цифры и некоторые специальные символы,
но первым символом не может быть число. В качестве имени функции нельзя использовать
ключевые слова и следует избегать ситации, когда переменная и функция имеют одно и то же имя. 

\index{def keyword}
\index{keyword!def}
\index{argument}

Пустые скобки сразу после названия функции означают, что данная функция не принимает каких-либо
аргументов. В дальнейшем мы будем создавать функции с аргументами в качестве входных 
параметров.

\index{parentheses!empty}
\index{header}
\index{body}
\index{indentation}
\index{colon}

Первая строка определения функции называется *заголовком*; остальная часть -  *телом*.
Заголовок должен заканчиваться двоеточием, а тело должно быть оформлено отступами. 
По соглашению, количество отступов всегда равно 4 пробелам. В теле может содержаться 
любое число операторов.

\index{ellipses}

Если вы введете определение функции в интерактивном режиме интерпретатора, он нчанет печатать многоточия, 
чтобы показать, что определение еще не завершено:

~~~~ {.python}
>>> def print_lyrics():
...     print("I'm a lumberjack, and I'm okay.")
...     print('I sleep all night and I work all day.')
...
~~~~

Чтобы заврешить функцию вам необходимо ввести пустую строку (в режиме скрипта это делать не нужно)

Определение функции создает переменную с таким же именем.

~~~~ {.python}
>>> print(print_lyrics)
<function print_lyrics at 0xb7e99e9c>
>>> print(type(print_lyrics))
<class 'function'>
~~~~

Значением `print_lyrics` будет ссылка на  *объект-функцию*, у котрой будет
тип "функция".

\index{function object}
\index{object!function}

Синтаксис для вызова новой функции точно такой же, как и у встроенных функций:

~~~~ {.python}
>>> print_lyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
~~~~

После того, как выв создали определение своей функции, вы можете использовать ее 
из другой функции. Например, чтобы повторить предыдуший текст, мы можем создать следующую
функцию под названием `repeat_lyrics`:

~~~~ {.python}
def repeat_lyrics():
    print_lyrics()
    print_lyrics()
~~~~

И затем вызвать `repeat_lyrics`:

~~~~ {.python}
>>> repeat_lyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
~~~~

Определения и использование
--------------------

\index{function definition}

Pulling together the code fragments from the previous section, the whole
program looks like this:

\VerbatimInput{../code3/lyrics.py}

This program contains two function definitions: `print_lyrics` and
`repeat_lyrics`. Function definitions get executed just like other
statements, but the effect is to create function objects. The statements
inside the function do not get executed until the function is called,
and the function definition generates no output.

\index{use before def}

As you might expect, you have to create a function before you can
execute it. In other words, the function definition has to be executed
before the first time it is called.

**Exercise 2: Move the last line of this program to the top, so the
function call appears before the definitions. Run the program and see
what error message you get.**

**Exercise 3: Move the function call back to the bottom and move the
definition of `print_lyrics` after the definition of `repeat_lyrics`.
What happens when you run this program?**

Flow of execution
-----------------

\index{flow of execution}

In order to ensure that a function is defined before its first use, you
have to know the order in which statements are executed, which is called
the *flow of execution*.

Execution always begins at the first statement of the program.
Statements are executed one at a time, in order from top to bottom.

Function *definitions* do not alter the flow of execution of the
program, but remember that statements inside the function are not
executed until the function is called.

A function call is like a detour in the flow of execution. Instead of
going to the next statement, the flow jumps to the body of the function,
executes all the statements there, and then comes back to pick up where
it left off.

That sounds simple enough, until you remember that one function can call
another. While in the middle of one function, the program might have to
execute the statements in another function. But while executing that new
function, the program might have to execute yet another function!

Fortunately, Python is good at keeping track of where it is, so each
time a function completes, the program picks up where it left off in the
function that called it. When it gets to the end of the program, it
terminates.

What's the moral of this sordid tale? When you read a program, you don't
always want to read from top to bottom. Sometimes it makes more sense if
you follow the flow of execution.

Параметры и аргументы
------------------------

\index{parameter}
\index{function parameter}
\index{argument}
\index{function argument}

Some of the built-in functions we have seen require arguments. For
example, when you call `math.sin` you pass a number as an
argument. Some functions take more than one argument:
`math.pow` takes two, the base and the exponent.

Inside the function, the arguments are assigned to variables called
*parameters*. Here is an example of a user-defined
function that takes an argument:

\index{parentheses!parameters in}

~~~~ {.python}
def print_twice(bruce):
    print(bruce)
    print(bruce)
~~~~

This function assigns the argument to a parameter named
`bruce`. When the function is called, it prints the value of
the parameter (whatever it is) twice.

This function works with any value that can be printed.

~~~~ {.python}
>>> print_twice('Spam')
Spam
Spam
>>> print_twice(17)
17
17
>>> import math
>>> print_twice(math.pi)
3.141592653589793
3.141592653589793
~~~~

The same rules of composition that apply to built-in functions also
apply to user-defined functions, so we can use any kind of expression as
an argument for `print_twice`:

\index{composition}

~~~~ {.python}
>>> print_twice('Spam '*4)
Spam Spam Spam Spam
Spam Spam Spam Spam
>>> print_twice(math.cos(math.pi))
-1.0
-1.0
~~~~

The argument is evaluated before the function is called, so in the
examples the expressions `'Spam '*4` and `math.cos(math.pi)`
are only evaluated once.

\index{argument}

You can also use a variable as an argument:

~~~~ {.python}
>>> michael = 'Eric, the half a bee.'
>>> print_twice(michael)
Eric, the half a bee.
Eric, the half a bee.
~~~~

The name of the variable we pass as an argument (`michael`)
has nothing to do with the name of the parameter (`bruce`).
It doesn't matter what the value was called back home (in the caller);
here in `print_twice`, we call everybody `bruce`.

Fruitful functions and void functions
-------------------------------------

\index{fruitful function}
\index{void function}
\index{function, fruitful}
\index{function, void}

Some of the functions we are using, such as the math functions, yield
results; for lack of a better name, I call them *fruitful
functions*. Other functions, like `print_twice`, perform an
action but don't return a value. They are called *void
functions*.

When you call a fruitful function, you almost always want to do
something with the result; for example, you might assign it to a
variable or use it as part of an expression:

~~~~ {.python}
x = math.cos(radians)
golden = (math.sqrt(5) + 1) / 2
~~~~

When you call a function in interactive mode, Python displays the
result:

~~~~ {.python}
>>> math.sqrt(5)
2.23606797749979
~~~~

But in a script, if you call a fruitful function and do not store the
result of the function in a variable, the return value vanishes into the
mist!

~~~~ {.python}
math.sqrt(5)
~~~~

This script computes the square root of 5, but since it doesn't store
the result in a variable or display the result, it is not very useful.

\index{interactive mode}
\index{script mode}

Void functions might display something on the screen or have some other
effect, but they don't have a return value. If you try to assign the
result to a variable, you get a special value called `None`.

\index{None special value}
\index{special value!None}

~~~~ {.python}
>>> result = print_twice('Bing')
Bing
Bing
>>> print(result)
None
~~~~

The value `None` is not the same as the string "None". It
is a special value that has its own type:

~~~~ {.python}
>>> print(type(None))
<class 'NoneType'>
~~~~

To return a result from a function, we use the `return`
statement in our function. For example, we could make a very simple
function called `addtwo` that adds two numbers together and
returns a result.

\VerbatimInput{../code3/addtwo.py}

When this script executes, the `print` statement will print
out "8" because the `addtwo` function was called with 3 and 5
as arguments. Within the function, the parameters `a` and
`b` were 3 and 5 respectively. The function computed the sum
of the two numbers and placed it in the local function variable named
`added`. Then it used the `return` statement to
send the computed value back to the calling code as the function result,
which was assigned to the variable `x` and printed out.

Зачем использовать функции?
--------------

\index{function, reasons for}

It may not be clear why it is worth the trouble to divide a program into
functions. There are several reasons:

-   Creating a new function gives you an opportunity to name a group of
    statements, which makes your program easier to read, understand, and
    debug.

-   Functions can make a program smaller by eliminating repetitive code.
    Later, if you make a change, you only have to make it in one place.

-   Dividing a long program into functions allows you to debug the parts
    one at a time and then assemble them into a working whole.

-   Well-designed functions are often useful for many programs. Once you
    write and debug one, you can reuse it.

Throughout the rest of the book, often we will use a function definition
to explain a concept. Part of the skill of creating and using functions
is to have a function properly capture an idea such as "find the
smallest value in a list of values". Later we will show you code that
finds the smallest in a list of values and we will present it to you as
a function named `min` which takes a list of values as its
argument and returns the smallest value in the list.

Отладка
---------

\index{debugging}

If you are using a text editor to write your scripts, you might run into
problems with spaces and tabs. The best way to avoid these problems is
to use spaces exclusively (no tabs). Most text editors that know about
Python do this by default, but some don't.

\index{whitespace}

Tabs and spaces are usually invisible, which makes them hard to debug,
so try to find an editor that manages indentation for you.

Also, don't forget to save your program before you run it. Some
development environments do this automatically, but some don't. In that
case, the program you are looking at in the text editor is not the same
as the program you are running.

Debugging can take a long time if you keep running the same incorrect
program over and over!

Make sure that the code you are looking at is the code you are running.
If you're not sure, put something like `print("hello")` at the beginning
of the program and run it again. If you don't see `hello`, you're not
running the right program!

Глоссарий
--------

algorithm
:   A general process for solving a category of problems.
\index{algorithm}

argument
:   A value provided to a function when the function is called. This
    value is assigned to the corresponding parameter in the function.
\index{argument}

body
:   The sequence of statements inside a function definition.
\index{body}

composition
:   Using an expression as part of a larger expression, or a statement
    as part of a larger statement.
\index{composition}

deterministic
:   Pertaining to a program that does the same thing each time it runs,
    given the same inputs.
\index{deterministic}

dot notation
:   The syntax for calling a function in another module by specifying
    the module name followed by a dot (period) and the function name.
\index{dot notation}

flow of execution
:   The order in which statements are executed during a program run.
\index{flow of execution}

fruitful function
:   A function that returns a value.
\index{fruitful function}

function
:   A named sequence of statements that performs some useful operation.
    Functions may or may not take arguments and may or may not produce a
    result.
\index{function}

function call
:   A statement that executes a function. It consists of the function
    name followed by an argument list.
\index{function call}

function definition
:   A statement that creates a new function, specifying its name,
    parameters, and the statements it executes.
\index{function definition}

function object
:   A value created by a function definition. The name of the function
    is a variable that refers to a function object.
\index{function definition}

header
:   The first line of a function definition.
\index{header}

import statement
:   A statement that reads a module file and creates a module object.
\index{import statement}
\index{statement!import}

module object
:   A value created by an `import` statement that provides
    access to the data and code defined in a module.
\index{module}

parameter
:   A name used inside a function to refer to the value passed as an
    argument.
\index{parameter}

pseudorandom
:   Pertaining to a sequence of numbers that appear to be random, but
    are generated by a deterministic program.
\index{pseudorandom}

return value
:   The result of a function. If a function call is used as an
    expression, the return value is the value of the expression.
\index{return value}

void function
:   A function that does not return a value.
\index{void function}

Упражнения
---------

**Exercise 4: What is the purpose of the "def" keyword in Python?**

a\) It is slang that means "the following code is really cool"\
b) It indicates the start of a function\
c) It indicates that the following indented section of code is to be
stored for later\
d) b and c are both true\
e) None of the above

**Exercise 5: What will the following Python program print out?**

~~~~ {.python}
def fred():
   print("Zap")

def jane():
   print("ABC")

jane()
fred()
jane()
~~~~

a\) Zap ABC jane fred jane\
b) Zap ABC Zap\
c) ABC Zap jane\
d) ABC Zap ABC\
e) Zap Zap Zap

**Exercise 6: Rewrite your pay computation with time-and-a-half for
overtime and create a function called `computepay` which
takes two parameters (`hours` and `rate`).**

~~~~
Enter Hours: 45
Enter Rate: 10
Pay: 475.0
~~~~

**Exercise 7: Rewrite the grade program from the previous chapter using a
function called `computegrade` that takes a score as its
parameter and returns a grade as a string.**

~~~~
 Score   Grade
>= 0.9     A
>= 0.8     B
>= 0.7     C
>= 0.6     D
 < 0.6     F
~~~~

~~~~
Enter score: 0.95
A
~~~~

~~~~
Enter score: perfect
Bad score
~~~~

~~~~
Enter score: 10.0
Bad score
~~~~

~~~~
Enter score: 0.75
C
~~~~

~~~~
Enter score: 0.5
F
~~~~

Run the program repeatedly to test the various different values for
input.
