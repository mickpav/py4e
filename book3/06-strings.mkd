Строки
=======

Строка - это последовательность
----------------------

\index{sequence}
\index{character}
\index{bracket operator}
\index{operator!bracket}

Строка - это *последовательность* символов. Вы можете полчить доступ 
к каждому символу с посощью квадртаных скобок:

~~~~ {.python}
>>> fruit = 'banana'
>>> letter = fruit[1]
~~~~

\index{index}
\index{}

Второе выражение извлекает из строки символ, стоящий на позиции 1 из переменной `fruit` и 
присваивает его переменной `letter`.

Выражение в квадратных скобках называется *индексом*. Индекс показывает позицию
определенного символа в строковой последовательности.

Однако результатом будет совсем не то, что вы ожидали:

~~~~ {.python}
>>> print(letter)
a
~~~~

Для всех людей очевидно, что  первая буква слова "banana" это "b", не 
"a". Но в  Python, индекс является смещением от начала строки, поэтому 
индекс первой буквы будет равен 0.

~~~~ {.python}
>>> letter = fruit[0]
>>> print(letter)
b
~~~~

Итак, "b" будет 0 буквой в слове "banana",
"a" будет первой буквой и  "n"  - второй буквой.

![String Indexes](height=0.75in@../images/string)

\index{index!starting at zero}
\index{zero, index starting at}

В качестве индекса может использоваться любое выражение, включая 
переменные, операторы в качестве индекса, но значением индекса 
всегда должно быть целое число. В ином случае у вас получится:

\index{index}
\index{}
\index{exception!TypeError}
\index{TypeError}

~~~~ {.python}
>>> letter = fruit[1.5]
TypeError: string indices must be integers
~~~~

Вычисление длины строки с помощью функции `len`
-----------------------------------------------------

\index{len function}
\index{function!len}

`len` является встроенной функцией, которая возвращает колчиество символов в строке:

~~~~ {.python}
>>> fruit = 'banana'
>>> len(fruit)
6
~~~~

Чтобы получить последний символ в строке вы можете попробовать следующий код:

\index{exception!IndexError}
\index{IndexError}

~~~~ {.python}
>>> length = len(fruit)
>>> last = fruit[length]
IndexError: string index out of range
~~~~

Причиной ошибки `IndexError` является то, что в слове "banana"  нет символа с индексом 6. 
Так как индексы считаются с 0, то 6 букв будут нумероваться от 0 до 5. 
Таким образом, чтобы получить последний символ, вам необходимо отнять 1 от `length`:

~~~~ {.python}
>>> last = fruit[length-1]
>>> print(last)
a
~~~~

В качестве альтернативы можно использовать отрицательные индексы, в таком случае отсчет 
ведется с конца строки. Выражение `fruit[-1]` вернет последний символ, `fruit[-2]` 
вернет предпоследний  и так далее.

\index{index!negative}
\index{negative index}

Перебор строки с помощью цикла
--------------------------------------

\index{traversal}
\index{loop!traversal}
\index{for loop}
\index{loop!for}
\index{statement!for}
\index{traversal}

Многие операции включают в себя посимвольную обработку строки.
Оерация начинается с первого символа, каждый символ выбирается, над ним 
производятся какие-либо действия и так до конца строки.
подобный метод обработки называется *проходом*.
Один из способов организации прохода - с помощью
конструкции `while`:

~~~~ {.python}
index = 0
while index < len(fruit):
    letter = fruit[index]
    print(letter)
    index = index + 1
~~~~

Данный цикл проходит строку и выводит кажддый символ по одному в строке.
Условие цикла  `index < len(fruit)`, , так что когда `index` становится
равным  длине строки, условие не выполняется и тело цикла не исполняется. 
Последний символ, к которому цикл получает доступ имеет индекс  `len(fruit)-1`,
который фвляется последним в строке.

**Упражнение 1: Напишите цикл  `while`, который начинается с последнего символа
строки, проходит до первого и выводит каждый символ на экран отдельной строкой.**

Другим способом организации прохода строки является цикл `for`:

~~~~ {.python}
for char in fruit:
    print(char)
~~~~

Каждый раз в теле цикла значение символа присваивается переменной `char`. 
Цикл продолжаетя до тех пор, пока не останется символов.

Срезы строк
-------------

\index{slice operator}
\index{operator!slice}
\index{index!slice}
\index{string!slice}
\index{slice!string}

Часть (сегмент) строки называется *срезом*. Выбор среза аналогичен
выбору символа:

~~~~ {.python}
>>> s = 'Monty Python'
>>> print(s[0:5])
Monty
>>> print(s[6:12])
Python
~~~~

Команда возвращает часть строки, начиная с позиции "n"  до символа в позиции "m",
включая первый и не включая последний.

Если опустить первый индекс (перед двоеточием), срез будет сделан с начала строки.
Если опустить второй индекс, срез будет сделан до конца строки:

~~~~ {.python}
>>> fruit = 'banana'
>>> fruit[:3]
'ban'
>>> fruit[3:]
'ana'
~~~~

Если первый индекс больше, либо равен второму, результатом среза будет *пустая строка*, представленная 
двумя кавычкамиs:

\index{quotation mark}

~~~~ {.python}
>>> fruit = 'banana'
>>> fruit[3:3]
''
~~~~

Пустая строка не содержит символов и ее длина равна 0, но все равно она будет явлться
строкой во всех смыслах.

**Упражнение 2: Дана строка `fruit`, что будет результатом среза `fruit[:]`?**

\index{copy!slice}
\index{slice!copy}

Строки - неизменяемы
---------------------

\index{mutability}
\index{immutability}
\index{string!immutable}

Иногда может появиться желание использовать оператор с левой стороны от 
команды присваивания, чтобы изменить символ в строке. Например:

\index{TypeError}
\index{exception!TypeError}

~~~~ {.python}
>>> greeting = 'Hello, world!'
>>> greeting[0] = 'J'
TypeError: 'str' object does not support item assignment
~~~~

The "object" in this case is the string and the "item" is the character
you tried to assign. For now, an *object* is the same
thing as a value, but we will refine that definition later. An
*item* is one of the values in a sequence.

\index{object}
\index{item assignment}
\index{assignment!item}
\index{immutability}

The reason for the error is that strings are *immutable*,
which means you can't change an existing string. The best you can do is
create a new string that is a variation on the original:

~~~~ {.python}
>>> greeting = 'Hello, world!'
>>> new_greeting = 'J' + greeting[1:]
>>> print(new_greeting)
Jello, world!
~~~~

This example concatenates a new first letter onto a slice of
`greeting`. It has no effect on the original string.

\index{concatenation}

Looping and counting
--------------------

\index{counter}
\index{counting and looping}
\index{looping and counting}
\index{looping!with strings}

The following program counts the number of times the letter
"a" appears in a string:

~~~~ {.python}
word = 'banana'
count = 0
for letter in word:
    if letter == 'a':
        count = count + 1
print(count)
~~~~

This program demonstrates another pattern of computation called a
*counter*. The variable `count` is initialized
to 0 and then incremented each time an "a" is found. When the
loop exits, `count` contains the result: the total number of
a's.

\index{encapsulation}

**Exercise 3: Encapsulate this code in a function named `count`, and
generalize it so that it accepts the string and the letter as arguments.**

The `in` operator
----------------------------

\index{in operator}
\index{operator!in}
\index{boolean operator}
\index{operator!boolean}

The word `in` is a boolean operator that takes two strings
and returns `True` if the first appears as a substring in the
second:

~~~~ {.python}
>>> 'a' in 'banana'
True
>>> 'seed' in 'banana'
False
~~~~

String comparison
-----------------

\index{string!comparison}
\index{comparison!string}

The comparison operators work on strings. To see if two strings are
equal:

~~~~ {.python}
if word == 'banana':
    print('All right, bananas.')
~~~~ 

Other comparison operations are useful for putting words in alphabetical
order:

~~~~ {.python}
if word < 'banana':
    print('Your word,' + word + ', comes before banana.')
elif word > 'banana':
    print('Your word,' + word + ', comes after banana.')
else:
    print('All right, bananas.')
~~~~

Python does not handle uppercase and lowercase letters the same way that
people do. All the uppercase letters come before all the lowercase
letters, so:

~~~~
Your word, Pineapple, comes before banana.
~~~~

A common way to address this problem is to convert strings to a standard
format, such as all lowercase, before performing the comparison. Keep
that in mind in case you have to defend yourself against a man armed
with a Pineapple.

String methods
---------------------------

Strings are an example of Python *objects*. An object
contains both data (the actual string itself) and
*methods*, which are effectively functions that are built
into the object and are available to any *instance* of
the object.

Python has a function called `dir` which lists the methods
available for an object. The `type` function shows the type
of an object and the `dir` function shows the available
methods.

~~~~ {.python}
>>> stuff = 'Hello world'
>>> type(stuff)
<class 'str'>
>>> dir(stuff)
['capitalize', 'casefold', 'center', 'count', 'encode',
'endswith', 'expandtabs', 'find', 'format', 'format_map',
'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit',
'isidentifier', 'islower', 'isnumeric', 'isprintable',
'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower',
'lstrip', 'maketrans', 'partition', 'replace', 'rfind',
'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip',
'split', 'splitlines', 'startswith', 'strip', 'swapcase',
'title', 'translate', 'upper', 'zfill']
>>> help(str.capitalize)
Help on method_descriptor:

capitalize(...)
    S.capitalize() -> str

    Return a capitalized version of S, i.e. make the first character
    have upper case and the rest lower case.
>>>
~~~~

While the `dir` function lists the methods, and you can use
`help` to get some simple documentation on a method, a better
source of documentation for string methods would be
<https://docs.python.org/library/stdtypes.html#string-methods>.

Calling a *method* is similar to calling a function (it
takes arguments and returns a value) but the syntax is different. We call
a method by appending the method name to the variable name using the
period as a delimiter.

For example, the method `upper` takes a string and returns a
new string with all uppercase letters:

\index{method}
\index{string!method}

Instead of the function syntax `upper(word)`, it uses the
method syntax `word.upper()`.

\index{dot notation}

~~~~ {.python}
>>> word = 'banana'
>>> new_word = word.upper()
>>> print(new_word)
BANANA
~~~~

This form of dot notation specifies the name of the method,
`upper`, and the name of the string to apply the method to,
`word`. The empty parentheses indicate that this method takes
no argument.

\index{parentheses!empty}

A method call is called an *invocation*; in this case, we
would say that we are invoking `upper` on the
`word`.

\index{invocation}

For example, there is a string method named `find` that
searches for the position of one string within another:

~~~~ {.python}
>>> word = 'banana'
>>> index = word.find('a')
>>> print(index)
1
~~~~ 

In this example, we invoke `find` on `word` and
pass the letter we are looking for as a parameter.

The `find` method can find substrings as well as characters:

~~~~ {.python}
>>> word.find('na')
2
~~~~

It can take as a second argument the index where it should start:

\index{optional argument}
\index{argument!optional}

~~~~ {.python}
>>> word.find('na', 3)
4
~~~~

One common task is to remove white space (spaces, tabs, or newlines)
from the beginning and end of a string using the `strip`
method:

~~~~ {.python}
>>> line = '  Here we go  '
>>> line.strip()
'Here we go'
~~~~

Some methods such as *startswith* return boolean values.

~~~~ {.python}
>>> line = 'Have a nice day'
>>> line.startswith('Have')
True
>>> line.startswith('h')
False
~~~~

You will note that `startswith` requires case to match, so
sometimes we take a line and map it all to lowercase before we do any
checking using the `lower` method.

~~~~ {.python}
>>> line = 'Have a nice day'
>>> line.startswith('h')
False
>>> line.lower()
'have a nice day'
>>> line.lower().startswith('h')
True
~~~~

In the last example, the method `lower` is called and then we
use `startswith` to see if the resulting lowercase string
starts with the letter "h". As long as we are careful with the order, we
can make multiple method calls in a single expression.

\index{count method}
\index{method!count}

**Exercise 4: There is a string method called `count` that is similar to
the function in the previous exercise. Read the documentation of this
method at:

<https://docs.python.org/library/stdtypes.html#string-methods> 

Write an invocation that counts the number of times the letter a occurs
in "banana".**

Parsing strings
---------------

Often, we want to look into a string and find a substring. For example
if we were presented a series of lines formatted as follows:

`From stephen.marquard@`*` uct.ac.za`*` Sat Jan  5 09:14:16 2008`

and we wanted to pull out only the second half of the address (i.e.,
`uct.ac.za`) from each line, we can do this by using the
`find` method and string slicing.

First, we will find the position of the at-sign in the string. Then we
will find the position of the first space *after* the at-sign. And then
we will use string slicing to extract the portion of the string which we
are looking for.

~~~~ {.python}
>>> data = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'
>>> atpos = data.find('@')
>>> print(atpos)
21
>>> sppos = data.find(' ',atpos)
>>> print(sppos)
31
>>> host = data[atpos+1:sppos]
>>> print(host)
uct.ac.za
>>>
~~~~

We use a version of the `find` method which allows us to
specify a position in the string where we want `find` to
start looking. When we slice, we extract the characters from "one beyond
the at-sign through up to *but not including* the space character".

The documentation for the `find` method is available at

<https://docs.python.org/library/stdtypes.html#string-methods>.

Format operator
---------------

\index{format operator}
\index{operator!format}

The *format operator*, `%` allows us to
construct strings, replacing parts of the strings with the data stored
in variables. When applied to integers, `%` is the modulus
operator. But when the first operand is a string, `%` is the
format operator.

\index{format string}

The first operand is the *format string*, which contains
one or more *format sequences* that specify how the
second operand is formatted. The result is a string.

\index{format sequence}

For example, the format sequence `%d` means that the second operand
should be formatted as an integer ("d" stands for "decimal"):

~~~~ {.python}
>>> camels = 42
>>> '%d' % camels
'42'
~~~~

The result is the string '42', which is not to be confused with the
integer value 42.

A format sequence can appear anywhere in the string, so you can embed a
value in a sentence:

~~~~ {.python}
>>> camels = 42
>>> 'I have spotted %d camels.' % camels
'I have spotted 42 camels.'
~~~~

If there is more than one format sequence in the string, the second
argument has to be a tuple^[A tuple is a sequence of comma-separated 
values inside a pair of parenthesis. We will cover tuples in Chapter 10].
Each format sequence is matched with an
element of the tuple, in order.

The following example uses `%d` to format an integer, `%g` to format
a floating-point number (don't ask why), and `%s` to format a string:

~~~~ {.python}
>>> 'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')
'In 3 years I have spotted 0.1 camels.'
~~~~

The number of elements in the tuple must match the number of format
sequences in the string. The types of the elements also must match the
format sequences:

\index{exception!TypeError}
\index{TypeError}

~~~~ {.python}
>>> '%d %d %d' % (1, 2)
TypeError: not enough arguments for format string
>>> '%d' % 'dollars'
TypeError: %d format: a number is required, not str
~~~~

In the first example, there aren't enough elements; in the second, the
element is the wrong type.

The format operator is powerful, but it can be difficult to use. You can
read more about it at

<https://docs.python.org/library/stdtypes.html#printf-style-string-formatting>.

Debugging
---------

\index{debugging}

A skill that you should cultivate as you program is always asking
yourself, "What could go wrong here?" or alternatively, "What crazy
thing might our user do to crash our (seemingly) perfect program?"

For example, look at the program which we used to demonstrate the
`while` loop in the chapter on iteration:

\VerbatimInput{../code3/copytildone2.py}

Look what happens when the user enters an empty line of input:

~~~~ {.python}
> hello there
hello there
> # don't print this
> print this!
print this!
>
Traceback (most recent call last):
  File "copytildone.py", line 3, in <module>
    if line[0] == '#':
IndexError: string index out of range
~~~~

The code works fine until it is presented an empty line. Then there is
no zero-th character, so we get a traceback. There are two solutions to
this to make line three "safe" even if the line is empty.

One possibility is to simply use the `startswith` method
which returns `False` if the string is empty.

~~~~ {.python}
if line.startswith('#'):
~~~~

\index{guardian pattern}
\index{pattern!guardian}

Another way is to safely write the `if` statement using the
*guardian* pattern and make sure the second logical
expression is evaluated only where there is at least one character in
the string.:

~~~~ {.python}
if len(line) > 0 and line[0] == '#':
~~~~

Glossary
--------

counter
:   A variable used to count something, usually initialized to zero and
    then incremented.
\index{counter}

empty string
:   A string with no characters and length 0, represented by two
    quotation marks.
\index{empty string}

format operator
:   An operator, `%`, that takes a format string and a tuple
    and generates a string that includes the elements of the tuple
    formatted as specified by the format string.
\index{format operator}
\index{operator!format}

format sequence
:   A sequence of characters in a format string, like `%d`,
    that specifies how a value should be formatted.
\index{format sequence}

format string
:   A string, used with the format operator, that contains format
    sequences.
\index{format string}

flag
:   A boolean variable used to indicate whether a condition is true or false.
\index{flag}

invocation
:   A statement that calls a method.
\index{invocation}

immutable
:   The property of a sequence whose items cannot be assigned.
\index{immutability}

index
:   An integer value used to select an item in a sequence, such as a
    character in a string.
\index{index}
\index{}

item
:   One of the values in a sequence.
\index{item}

method
:   A function that is associated with an object and called using dot
    notation.
\index{method}

object
:   Something a variable can refer to. For now, you can use "object" and
    "value" interchangeably.
\index{object}

search
:   A pattern of traversal that stops when it finds what it is looking
    for.
\index{search pattern}
\index{pattern!search}

sequence
:   An ordered set; that is, a set of values where each value is
    identified by an integer index.
\index{sequence}

slice
:   A part of a string specified by a range of indices.
\index{slice}

traverse
:   To iterate through the items in a sequence, performing a similar
    operation on each.
\index{traversal}

Exercises
---------

**Exercise 5: Take the following Python code that stores a string:**

`str = 'X-DSPAM-Confidence: `**`0.8475`**`'`

**Use `find` and string slicing to extract the portion of the
string after the colon character and then use the `float`
function to convert the extracted string into a floating point number.**

\index{string method}
\index{method!string}

**Exercise 6: Read the documentation of the string methods at
<https://docs.python.org/library/stdtypes.html#string-methods>
You might want to experiment with some of them to make sure you understand
how they work. `strip` and `replace` are
particularly useful.**

**The documentation uses a syntax that might be confusing. For example, in
`find(sub[, start[, end]])`, the brackets indicate optional arguments.
So `sub` is required, but `start` is optional, and
if you include `start`, then `end` is optional.**

