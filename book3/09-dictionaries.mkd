Словари
============

\index{dictionary}
\index{dictionary}

\index{type!dict}
\index{key}
\index{key-value pair}
\index{index}
\index{}

*Словарь* напоминает список, но в более общем смысле. В списке в качестве 
значений индексов выступают целые числа; в словаре, в качестве индекса
может быть (практически) любой тип данных.

Словарь можно представить себе как соотношение между набором индексов,
(которые называются *ключами*) и набором значений. Каждый ключ имеет соответствующее 
значение. Связь ключа и значения называется *ключ-значение*.

Вв качестве примера мы создадим словарь, который содержит соответствие 
английских слов к испанским, соответственно ключи и значения будут строковыми параметрами.
Функция `dict` создает новый пустой словарь. Так как `dict` является встроенной функцией,
вы должны избегать ее использования в кчестве имени переменной.

\index{dict function}
\index{function!dict}

~~~~ {.python .trinket}
>>> eng2sp = dict()
>>> print(eng2sp)
{}
~~~~

Фигурные скобки  `{}`, представляют пустой словарь. Для добавления элементов в него, вы можете использовать 
квадратные скобки:

\index{squiggly bracket}
\index{bracket!squiggly}

~~~~ {.python}
>>> eng2sp['one'] = 'uno'
~~~~

Данная строка создает элемент, который соотносит ключ `'one'` со
значением "uno". Если мы сейчас выведем содержимое словаря, мы увидим
пару ключ-значение, разделенные двоеточием:

~~~~ {.python}
>>> print(eng2sp)
{'one': 'uno'}
~~~~

Такой формат вывода является также и форматом ввода. К примеру, вы можете создать новый
словарь с тремя элементами.  Но если вы выведете его содержимое, можете быть удивлены:

~~~~ {.python}
>>> eng2sp = {'one': 'uno', 'two': 'dos', 'three': 'tres'}
>>> print(eng2sp)
{'one': 'uno', 'three': 'tres', 'two': 'dos'}
~~~~

Порядок следования элементов в словаре не всегда тот же самый. Если вы попробуете 
выполнить этот код у себя на компьютере, у вас может получиться совершенно другой результат.
В целом, порядок следования элементов в словаре является непредсказуемым. 

Но это не является проблемой, так как элементы словаря никогда не индексируются
целочисленными индексами. Вместо этого вы используете ключи для поиска соответствующих значений:

~~~~ {.python}
>>> print(eng2sp['two'])
'dos'
~~~~

Ключ `'two'` всегда соотносится со значением  "dos", поэтому порядок следования не важен.

Если ключ отсутствует в словаре, вы получите исключение:

\index{exception!KeyError}
\index{KeyError}

~~~~ {.python}
>>> print(eng2sp['four'])
KeyError: 'four'
~~~~

Функция `len` работает со словарями, она возвращает количество пар ключ-значение:

\index{len function}
\index{function!len}

~~~~ {.python}
>>> len(eng2sp)
3
~~~~

Оператор `in` operator также работает со словарями, он показывает содержится ли какое-либо значение 
в качестве *ключа* в словаре (к сожалению, то же самое нельзя сказать про значение).

\index{membership!dictionary}
\index{in operator}
\index{operator!in}

~~~~ {.python}
>>> 'one' in eng2sp
True
>>> 'uno' in eng2sp
False
~~~~

Для того, чтобы найти какое-либо значение в словаре, вы можете использовать метод `values`, 
который возвращает значения в виде типа, который может быть сконвертирован в список,
и на котором можно использовать оператор  `in` :

\index{values method}
\index{method!values}

~~~~ {.python}
>>> vals = list(eng2sp.values())
>>> 'uno' in vals
True
~~~~

Оператор `in` использует различные алгоритмы для списков и словарей.
Для списков используется алгорит линейного поиска. С увеличением размера 
списка увеличивается и время поиска, причем прямо пропорционально длине списка. 
Для словарей Python используетя алгоритм, называемый  *хэш-таблица*, у которого есть
замечательное свойство: оператору `in` всегда требуется одно и то же время для поиска,
независимо от того, сколько элементов находится в словаре. Я не могу объяснить почему 
хэш-таблица обладает такими волшебными свойствами, но вы можете почитать об этом по адресу
[wikipedia.org/wiki/Hash\_table](https://wikipedia.org/wiki/Hash_table).

\index{hash table}
\index{set membership}
\index{membership!set}

**Упражнение 1: Загрузите копию файла**
[www.py4e.com/code3/words.txt](http://www.py4e.com/code3/words.txt)

**Напишите программу, которая читает слова в файле *words.txt* и сохраняет их
в качестве ключей словаря. На значения в словаре пока не обращайте внимания.
Затем вы сможете использовать оператор `in` как быстрый способ для проверки,
находится ли строка в словаре.**

Словарь как набор счетчиков
-------------------------------

\index{counter}

Предположим, вам дана строка и вы хотите посчитать, сколько раз в ней встречается
каждая буква. Существует несколько способов сделать это:

1.  Вы можете создать 26 переменных, по одной для каждой буквы алфавита.
    Затем вы с помощью перебора строки увеличивать значение соответствующей переменной,
    возможно с помощью цепного условия.

2.  Вы можете использовать список из 26 элементов. Затем сконвертировать каждый символ
в число (используя втроенную функцию `ord`), затем использовать это число как индекс в списке
и инкрементировать соответствующий счетчик.

3.  Вы можете создать слдоварь, в котором символы будут выступать ключами, а счетчики - 
соответствующими значениями. При первом вхождении символа в словарь добавляется элемент. Затем
инкрментируется значение соответствующего ключа.

Каждый из этих вариантов выполняет одно и то же действие, но реализовано оно различными способами.

\index{implementation}

*Имплементация (реализация)*  - способ реализации операции; некоторые реализации могут быть хуже,
нектороые - лучше. Например, преимуществом реализации со словарем является то, что нам нет необходимости
заранее предусматривать появление конкретных символов, нужно лишь озаботиться их рамещением.

Вот как может выглядеть код для решения задачи:

~~~~ {.python .trinket}
word = 'brontosaurus'
d = dict()
for c in word:
    if c not in d:
        d[c] = 1
    else:
        d[c] = d[c] + 1
print(d)
~~~~

We are effectively computing a *histogram*, which is a
statistical term for a set of counters (or frequencies).

\index{histogram}
\index{frequency}
\index{traversal}

The `for` loop traverses the string. Each time through the
loop, if the character `c` is not in the dictionary, we
create a new item with key `c` and the initial value 1 (since
we have seen this letter once). If `c` is already in the
dictionary we increment `d[c]`.

\index{histogram}

Here's the output of the program:

~~~~
{'a': 1, 'b': 1, 'o': 2, 'n': 1, 's': 2, 'r': 2, 'u': 2, 't': 1}
~~~~

The histogram indicates that the letters "a" and "b"
appear once; "o" appears twice, and so on.

\index{get method}
\index{method!get}

Dictionaries have a method called `get` that takes a key and
a default value. If the key appears in the dictionary, `get`
returns the corresponding value; otherwise it returns the default value.
For example:

~~~~ {.python .trinket}
>>> counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
>>> print(counts.get('jan', 0))
100
>>> print(counts.get('tim', 0))
0
~~~~

We can use `get` to write our histogram loop more concisely.
Because the `get` method automatically handles the case where
a key is not in a dictionary, we can reduce four lines down to one and
eliminate the `if` statement.

~~~~ {.python}
word = 'brontosaurus'
d = dict()
for c in word:
    d[c] = d.get(c,0) + 1
print(d)
~~~~

The use of the `get` method to simplify this counting loop
ends up being a very commonly used "idiom" in Python and we will use it
many times in the rest of the book. So you should take a moment and
compare the loop using the `if` statement and `in`
operator with the loop using the `get` method. They do
exactly the same thing, but one is more succinct.

\index{idiom}

Dictionaries and files
----------------------

One of the common uses of a dictionary is to count the occurrence of
words in a file with some written text. Let's start with a very simple
file of words taken from the text of *Romeo and Juliet*.

For the first set of examples, we will use a shortened and simplified
version of the text with no punctuation. Later we will work with the
text of the scene with punctuation included.

    But soft what light through yonder window breaks
    It is the east and Juliet is the sun
    Arise fair sun and kill the envious moon
    Who is already sick and pale with grief

We will write a Python program to read through the lines of the file,
break each line into a list of words, and then loop through each of the
words in the line and count each word using a dictionary.

\index{nested loops}
\index{loop!nested}

You will see that we have two `for` loops. The outer loop is
reading the lines of the file and the inner loop is iterating through
each of the words on that particular line. This is an example of a
pattern called *nested loops* because one of the loops is
the *outer* loop and the other loop is the *inner* loop.

Because the inner loop executes all of its iterations each time the
outer loop makes a single iteration, we think of the inner loop as
iterating "more quickly" and the outer loop as iterating more slowly.

\index{Romeo and Juliet}

The combination of the two nested loops ensures that we will count every
word on every line of the input file.

\VerbatimInput{../code3/count1.py}
\begin{trinketfiles}
../code3/romeo.txt
\end{trinketfiles}

In our `else` statement, we use the more compact alternative for incrementing a variable. `counts[word] += 1` is equivalent to `counts[word] = counts[word] + 1`. Either method can be used to change the value of a variable by any desired amount. Similar alternatives exist for `-=`, `*=`, and `/=`.

When we run the program, we see a raw dump of all of the counts in
unsorted hash order. (the *romeo.txt* file is available at
[www.py4e.com/code3/romeo.txt](http://www.py4e.com/code3/romeo.txt))

~~~~
python count1.py
Enter the file name: romeo.txt
{'and': 3, 'envious': 1, 'already': 1, 'fair': 1,
'is': 3, 'through': 1, 'pale': 1, 'yonder': 1,
'what': 1, 'sun': 2, 'Who': 1, 'But': 1, 'moon': 1,
'window': 1, 'sick': 1, 'east': 1, 'breaks': 1,
'grief': 1, 'with': 1, 'light': 1, 'It': 1, 'Arise': 1,
'kill': 1, 'the': 3, 'soft': 1, 'Juliet': 1}
~~~~

It is a bit inconvenient to look through the dictionary to find the most
common words and their counts, so we need to add some more Python code
to get us the output that will be more helpful.

Looping and dictionaries
------------------------

\index{dictionary!looping with}
\index{looping!with dictionaries}
\index{traversal}

If you use a dictionary as the sequence in a `for` statement,
it traverses the keys of the dictionary. This loop prints each key and
the corresponding value:

~~~~ {.python}
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for key in counts:
    print(key, counts[key])
~~~~

Here's what the output looks like:

~~~~
jan 100
chuck 1
annie 42
~~~~

Again, the keys are in no particular order.

\index{idiom}

We can use this pattern to implement the various loop idioms that we
have described earlier. For example if we wanted to find all the entries
in a dictionary with a value above ten, we could write the following
code:

~~~~ {.python}
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for key in counts:
    if counts[key] > 10 :
        print(key, counts[key])
~~~~

The `for` loop iterates through the *keys* of
the dictionary, so we must use the index operator to retrieve the
corresponding *value* for each key. Here's what the output
looks like:

~~~~
jan 100
annie 42
~~~~

We see only the entries with a value above 10.

\index{keys method}
\index{method!keys}

If you want to print the keys in alphabetical order, you first make a
list of the keys in the dictionary using the `keys` method
available in dictionary objects, and then sort that list and loop
through the sorted list, looking up each key and printing out key-value
pairs in sorted order as follows:

~~~~ {.python}
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
lst = list(counts.keys())
print(lst)
lst.sort()
for key in lst:
    print(key, counts[key])
~~~~

Here's what the output looks like:

~~~~
['jan', 'chuck', 'annie']
annie 42
chuck 1
jan 100
~~~~

First you see the list of keys in unsorted order that we get from the
`keys` method. Then we see the key-value pairs in order from
the `for` loop.

Advanced text parsing
---------------------

\index{Romeo and Juliet}

In the above example using the file *romeo.txt*, we made the
file as simple as possible by removing all punctuation by hand. The
actual text has lots of punctuation, as shown below.

~~~~
But, soft! what light through yonder window breaks?
It is the east, and Juliet is the sun.
Arise, fair sun, and kill the envious moon,
Who is already sick and pale with grief,
~~~~

Since the Python `split` function looks for spaces and treats
words as tokens separated by spaces, we would treat the words "soft!"
and "soft" as *different* words and create a separate dictionary entry
for each word.

Also since the file has capitalization, we would treat "who" and "Who"
as different words with different counts.

We can solve both these problems by using the string methods
`lower`, `punctuation`, and
`translate`. The `translate` is the most subtle of
the methods. Here is the documentation for `translate`:

`line.translate(str.maketrans(fromstr, tostr, deletestr))`

*Replace the characters in `fromstr` with the character in the same position in `tostr`
and delete all characters that are in `deletestr`.
The `fromstr` and `tostr` can be empty strings and the `deletestr`
parameter can be omitted.*

We will not specify the `tostr` but we will use the
`deletestr` parameter to delete all of the punctuation. We
will even let Python tell us the list of characters that it considers
"punctuation":

~~~~ {.python}
>>> import string
>>> string.punctuation
'!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
~~~~

The parameters used by `translate` were different in Python 2.0.

We make the following modifications to our program:

\VerbatimInput{../code3/count2.py}
\begin{trinketfiles}
../code3/romeo-full.txt
\end{trinketfiles}

Part of learning the "Art of Python" or "Thinking Pythonically" is
realizing that Python often has built-in capabilities for many common
data analysis problems. Over time, you will see enough example code and
read enough of the documentation to know where to look to see if someone
has already written something that makes your job much easier.

The following is an abbreviated version of the output:

~~~~
Enter the file name: romeo-full.txt
{'swearst': 1, 'all': 6, 'afeard': 1, 'leave': 2, 'these': 2,
'kinsmen': 2, 'what': 11, 'thinkst': 1, 'love': 24, 'cloak': 1,
a': 24, 'orchard': 2, 'light': 5, 'lovers': 2, 'romeo': 40,
'maiden': 1, 'whiteupturned': 1, 'juliet': 32, 'gentleman': 1,
'it': 22, 'leans': 1, 'canst': 1, 'having': 1, ...}
~~~~

Looking through this output is still unwieldy and we can use Python to
give us exactly what we are looking for, but to do so, we need to learn
about Python *tuples*. We will pick up this example once
we learn about tuples.

Debugging
---------

\index{debugging}

As you work with bigger datasets it can become unwieldy to debug by
printing and checking data by hand. Here are some suggestions for
debugging large datasets:

Scale down the input
:   If possible, reduce the size of the dataset. For example if the
    program reads a text file, start with just the first 10 lines, or
    with the smallest example you can find. You can either edit the
    files themselves, or (better) modify the program so it reads only
    the first `n` lines.

    If there is an error, you can reduce `n` to the smallest
    value that manifests the error, and then increase it gradually as
    you find and correct errors.

Check summaries and types
:   Instead of printing and checking the entire dataset, consider
    printing summaries of the data: for example, the number of items in
    a dictionary or the total of a list of numbers.

    A common cause of runtime errors is a value that is not the right
    type. For debugging this kind of error, it is often enough to print
    the type of a value.

Write self-checks
:   Sometimes you can write code to check for errors automatically. For
    example, if you are computing the average of a list of numbers, you
    could check that the result is not greater than the largest element
    in the list or less than the smallest. This is called a "sanity
    check" because it detects results that are "completely illogical".
\index{sanity check}
\index{consistency check}

    Another kind of check compares the results of two different
    computations to see if they are consistent. This is called a
    "consistency check".

Pretty print the output
:   Formatting debugging output can make it easier to spot an error.

Again, time you spend building scaffolding can reduce the time you spend
debugging.
\index{scaffolding}

Glossary
--------

dictionary
:   A mapping from a set of keys to their corresponding values.
\index{dictionary}

hashtable
:   The algorithm used to implement Python dictionaries.
\index{hashtable}

hash function
:   A function used by a hashtable to compute the location for a key.
\index{hash function}

histogram
:   A set of counters.
\index{histogram}

implementation
:   A way of performing a computation.
\index{implementation}

item
:   Another name for a key-value pair.
\index{item!dictionary}

key
:   An object that appears in a dictionary as the first part of a
    key-value pair.
\index{key}

key-value pair
:   The representation of the mapping from a key to a value.
\index{key-value pair}

lookup
:   A dictionary operation that takes a key and finds the corresponding
    value.
\index{lookup}

nested loops
:   When there are one or more loops "inside" of another loop. The inner
    loop runs to completion each time the outer loop runs once.
\index{nested loops}
\index{loop!nested}

value
:   An object that appears in a dictionary as the second part of a
    key-value pair. This is more specific than our previous use of the
    word "value".
\index{value}

Exercises
---------

**Exercise 2: Write a program that categorizes each mail message by which
day of the week the commit was done. To do this look for lines that
start with "From", then look for the third word and keep a running count
of each of the days of the week. At the end of the program print out the
contents of your dictionary (order does not matter).**

**Sample Line:**

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
~~~~

**Sample Execution:**

~~~~
python dow.py
Enter a file name: mbox-short.txt
{'Fri': 20, 'Thu': 6, 'Sat': 1}
~~~~

**Exercise 3: Write a program to read through a mail log, build a
histogram using a dictionary to count how many messages have come from
each email address, and print the dictionary.**

~~~~
Enter file name: mbox-short.txt
{'gopal.ramasammycook@gmail.com': 1, 'louis@media.berkeley.edu': 3,
'cwen@iupui.edu': 5, 'antranig@caret.cam.ac.uk': 1,
'rjlowe@iupui.edu': 2, 'gsilver@umich.edu': 3,
'david.horwitz@uct.ac.za': 4, 'wagnermr@iupui.edu': 1,
'zqian@umich.edu': 4, 'stephen.marquard@uct.ac.za': 2,
'ray@media.berkeley.edu': 1}
~~~~

**Exercise 4: Add code to the above program to figure out who has the most messages in the file. After all the data has been read and the dictionary has been created, look through the dictionary using a maximum loop (see Chapter 5: Maximum and minimum loops) to find who has the most messages and print how many messages the person has.**

~~~~
Enter a file name: mbox-short.txt
cwen@iupui.edu 5

Enter a file name: mbox.txt
zqian@umich.edu 195
~~~~

**Exercise 5: This program records the domain name (instead of the
address) where the message was sent from instead of who the mail came
from (i.e., the whole email address). At the end of the program, print
out the contents of your dictionary.**

~~~~
python schoolcount.py
Enter a file name: mbox-short.txt
{'media.berkeley.edu': 4, 'uct.ac.za': 6, 'umich.edu': 7,
'gmail.com': 1, 'caret.cam.ac.uk': 1, 'iupui.edu': 8}
~~~~
