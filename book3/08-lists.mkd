
Списки
=====

\index{list}
\index{type!list}

Список - это последовательность
--------------------

Подобно строке, *список* является последовательностью значений. В строке
занчениями являются отдельные символы, в списке они могут быть любого типа. Значения списка 
называются *элементами*.

\index{element}
\index{sequence}
\index{item}

Существует насколько способов создания нового списка. Самый простой - это заключить элементы
в квадратные скобки ("[" и "]"):

~~~~ {.python}
[10, 20, 30, 40]
['crunchy frog', 'ram bladder', 'lark vomit']
~~~~

В первом примере список содержит 4 целых числа. Второй список содержит три строки
Элементы списка не обязательно должны быть одного типа.
Следующий список содержит строку, вещественное число, целое число и другой список:

~~~~ {.python}
['spam', 2.0, 5, [10, 20]]
~~~~ 

Список внутри другого списка называется *вложенным*.

\index{nested list}
\index{list!nested}

Список, не содержащий элементов, называется пустым списком, его можно создать 
с помощью квадратных скобок, `[]`.

\index{empty list}
\index{list!empty}

Само собой, элементы списка можно присваивать переменным:

~~~~ {.python .trinket}
>>> cheeses = ['Cheddar', 'Edam', 'Gouda']
>>> numbers = [17, 123]
>>> empty = []
>>> print(cheeses, numbers, empty)
['Cheddar', 'Edam', 'Gouda'] [17, 123] []
~~~~

\index{assignment}

Списки -  изменяемые
-----------------

\index{list!element}
\index{access}
\index{index}
\index{}
\index{bracket operator}
\index{operator!bracket}

Синтаксис доступа к элементам списка точно такой же, как и при доступе к 
элементам строки: спомощью квадратных скобок. Выражение, заключенное в скобках означает 
индекс. Как вы помните, нумерация индексов начинается с 0:

~~~~ {.python}
>>> print(cheeses[0])
Cheddar
~~~~

В отличие от строк, списки являются изменяемыми, так как вы можете изменить 
порядок следования элементов или присвоить новое значение элементу списка. 
Когда оператор скобки появляется с левой стороны от команды присваивания, он
идентифицирует элемент списка, которому будет присвоено значение.

\index{mutability}

~~~~ {.python .trinket}
>>> numbers = [17, 123]
>>> numbers[1] = 5
>>> print(numbers)
[17, 5]
~~~~

Первый элемент списка `numbers`, который ранее имел значение  123, теперь равен 5.

\index{index!starting at zero}
\index{zero, index starting at}

Вы можете представить себе список как отношение индексов к элементам.
Такое отношение называется  *соответствие*; каждый индекс
"соответствует" одному элементу.

\index{item assignment}
\index{assignment!item}

Индексы списка работают аналогично индексам строк:

-   в качестве индекса может выступать любое целочисленное выражение.

-   если вы попытаетсь прочитать или записать элемент, которого не существует,
вы получите ошибку индекса `IndexError`.

\index{exception!IndexError}
\index{IndexError}

-   если индекс является отрицательным числом, отсчет идет начиная с конца списка.

\index{list!index}
\index{list!membership}
\index{membership!list}
\index{in operator}
\index{operator!in}

Оператор `in` также работает в списках.

~~~~ {.python .trinket}
>>> cheeses = ['Cheddar', 'Edam', 'Gouda']
>>> 'Edam' in cheeses
True
>>> 'Brie' in cheeses
False
~~~~

Проход по элементам списка
-----------------

\index{list!traversal}
\index{traversal!list}
\index{for loop}
\index{loop!for}
\index{statement!for}

Самый частый способ перебора всех элементов списка - использование цикла `for`. 
Синтаксис точно такой же, как у строк:

~~~~ {.python}
for cheese in cheeses:
    print(cheese)
~~~~

Это работает отлично до тех пор, пока вам нужно только лишь прочитать элементы списка.
Но если вам неоходимо записать или обновить элементы, вам придется использовать индексы.
Один из варинатов - использование комбинации функций `range` и `len`:


\index{looping!with indices}
\index{index!looping with}

~~~~ {.python}
for i in range(len(numbers)):
    numbers[i] = numbers[i] * 2
~~~~

Данный цикл проходит по всему списку и обновляет каждый элемент. Функция `len`
возвращает количество элементов в списке,  `range` возвращает список индексов с 0 до $n-1$, 
где $n$ это длина списка.
В теле цикла  `i` получает индекс следующего элемента. В присваивании `i` используется, 
чтобы прочитать старое значение элемента и присвоить ему новое.

\index{item update}
\index{update!item}

Цикл `for` на пустом списке никогда не дойдет до исполнений операций в теле:

~~~~ {.python}
for x in empty:
    print('This never happens.')
~~~~

Несмотря на то, что список сожет содержать другой список, вложенный список 
все равно будет считаться как единичный элемент. Длина данного списка - 4:

\index{nested list}
\index{list!nested}

~~~~ {.python}
['spam', 1, ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2, 3]]
~~~~

Операции со списками 
---------------

\index{list!operation}

Оператор `+` производит конкатенацию списков:

\index{concatenation!list}
\index{list!concatenation}

~~~~ {.python .trinket}
>>> a = [1, 2, 3]
>>> b = [4, 5, 6]
>>> c = a + b
>>> print(c)
[1, 2, 3, 4, 5, 6]
~~~~

Соответственно, оператор  `*` повторяет список определенное количество раз:

\index{repetition!list}
\index{list!repetition}

~~~~ {.python .trinket}
>>> [0] * 4
[0, 0, 0, 0]
>>> [1, 2, 3] * 3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
~~~~

В первом примере список повторяется 4 раза, во втором - три раза.

Срезы списков
-----------

\index{slice operator}
\index{operator!slice}
\index{index!slice}
\index{list!slice}
\index{slice!list}

Оператор срезов также работает на списках:

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> t[1:3]
['b', 'c']
>>> t[:4]
['a', 'b', 'c', 'd']
>>> t[3:]
['d', 'e', 'f']
~~~~

Если опустить первый индекс - срез пойдет с самого начала списка. Если опустить второй индекс,
срез будет создан до самого конца списка. Если опустить оба индекса, то в результате среза будет создана 
копия всего списка.

\index{list!copy}
\index{slice!copy}
\index{copy!slice}

~~~~ {.python}
>>> t[:]
['a', 'b', 'c', 'd', 'e', 'f']
~~~~

Как как списки являются изменяемыми, то весьма полезным может оказаться создание копии списка
перед выполнением операций, которые меняют содержимое списков.

\index{mutability}

Оператор среза, находящийся слева от оператора присваивания, может менять значения нескольких элементов:

\index{slice!update}
\index{update!slice}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> t[1:3] = ['x', 'y']
>>> print(t)
['a', 'x', 'y', 'd', 'e', 'f']
~~~~

Методы списков
------------

\index{list!method}
\index{method, list}

Для выполнения операций со списками в Python реализован ряд методов. К примеру, 
`append` добавляет новый элемент в конец списка:

\index{append method}
\index{method!append}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> t.append('d')
>>> print(t)
['a', 'b', 'c', 'd']
~~~~

`extend` принимает в качестве аргумента список и добавляет все его элементы к другому списку:

\index{extend method}
\index{method!extend}

~~~~ {.python .trinket}
>>> t1 = ['a', 'b', 'c']
>>> t2 = ['d', 'e']
>>> t1.extend(t2)
>>> print(t1)
['a', 'b', 'c', 'd', 'e']
~~~~

В данном примере содержимое списка  `t2` остается неизменным.

Метод `sort` упорядочивает элементы списка от меньего к большему:

\index{sort method}
\index{method!sort}

~~~~ {.python .trinket}
>>> t = ['d', 'c', 'e', 'b', 'a']
>>> t.sort()
>>> print(t)
['a', 'b', 'c', 'd', 'e']
~~~~

Большинство методов работы со списками не возвращают значений, они лишь модифицируют список
и возвращают значение `None`. Если вы случайно запишете `t = t.sort()`, то будете разочарованы результатом.

\index{void method}
\index{method!void}
\index{None special value}
\index{special value!None}

Удаление элементов
-----------------

\index{element deletion}
\index{deletion, element of list}

Существует несколько методов для удаления элементов из списка. Если вам известен индекс
удаляемого элемента, можно использовать метод `pop`:

\index{pop method}
\index{method!pop}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> x = t.pop(1)
>>> print(t)
['a', 'c']
>>> print(x)
b
~~~~

`pop` изменяет список и возвращает элемент, который был удален. 
Если не указать индекс, метод удалит и вернет последний элемент списка.

Если вам не нужно значение удаленного элемента, можно воспользоваться методом `del`:

\index{del operator}
\index{operator!del}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> del t[1]
>>> print(t)
['a', 'c']
~~~~

Если вы знаете значение элемента, который нужно удалить (но не индекс), 
можно воспользоваться методом `remove`:

\index{remove method}
\index{method!remove}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> t.remove('b')
>>> print(t)
['a', 'c']
~~~~

Метод  `remove` всегда возвращает значение `None`.

\index{None special value}
\index{special value!None}

Для удаления более чем одного элемента можно восользоваться методом  `del` с индексом среза:

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> del t[1:5]
>>> print(t)
['a', 'f']
~~~~

И как обычно, срез выбирает все элементы с первого но не включая второй индекс.

Списки и функции
-------------------

Для списков реализован ряд встроенных функций, с помощью которых можно организовать 
быстрый поиск по списку без необходимости писать свои собственные циклы:

~~~~ {.python .trinket}
>>> nums = [3, 41, 12, 9, 74, 15]
>>> print(len(nums))
6
>>> print(max(nums))
74
>>> print(min(nums))
3
>>> print(sum(nums))
154
>>> print(sum(nums)/len(nums))
25
~~~~

Функция `sum()` работает только в том случае, когда элементы списка являются числам.
Остальные функции (`max()`, `len()`, и т.д.) работают со списками строк и дургими типами данных,
которые можно сравнивать

Теперь мы можем переписать программу, которая высчитывала среднее значение группы чисел, введенных пользователем 
с использованием списков.

Для начала - программа подсчета среднего значения без использования списка:

\VerbatimInput{../code3/avenum.py}

В этой программе мы используем переменные  `count` и `total`для 
подсчета количества чисел и их суммы.

We could simply remember each number as the user entered it and use
built-in functions to compute the sum and count at the end.

\VerbatimInput{../code3/avelist.py}

Мы создаем пустой список перед началом цикла и каждый раз, как пользователь вводит числоЮ
мы добавляем его в список. В конце программы мы просто вычисляем сумму чисел в списке 
и делим ее на количество числе в списке. 

Списки и строки
-----------------

\index{list}
\index{string}
\index{sequence}

Строка является последовательностью символов и список является последовательностью значений,
однако, список, состоящий из символов, не будет являться строкой. Для переход от строки к списку 
мы можем воспользоваться методом `list`:

\index{list!function}
\index{function!list}

~~~~ {.python .trinket}
>>> s = 'spam'
>>> t = list(s)
>>> print(t)
['s', 'p', 'a', 'm']
~~~~

Так как `list` является встроенной функцией, вы должны избегать ее использования в качетве 
имени переменной. Я также избегаю использовать букву "l", потому что ее очень легко перепутать с 
цифрой "1".
Именно поэтому я использую "t".

Функция `list`  разбивает строку на отдельные символы.
Если вам необходимо разбить строку на отдельные слова, вы можете воспользоваться методом`split`:

\index{split method}
\index{method!split}

~~~~ {.python .trinket}
>>> s = 'pining for the fjords'
>>> t = s.split()
>>> print(t)
['pining', 'for', 'the', 'fjords']
>>> print(t[2])
the
~~~~

После того, как вы с помощью `split` превратили строку в список слов, вы можете использовать
индексный оператор (квадратные скобки) для доступа к каждому в отдельности слову в списке.

Вы таже можете использовать `split` с дополнительным аргументом, который называется *разделитель*,
с помощью которого указывается, какой символ использовать в качестве разделителя слов. 
Следующий пример использует в качестве разделителя тире:

\index{optional argument}
\index{argument!optional}
\index{delimiter}

~~~~ {.python .trinket}
>>> s = 'spam-spam-spam'
>>> delimiter = '-'
>>> s.split(delimiter)
['spam', 'spam', 'spam']
~~~~

Метод `join` является противоположностью `split`. Он принимает список строк и объединяет их элементы.
`join` является строковым методом, поэтому перед вызовом функции, ей необходимо в качетве параметра передать разделитель:

\index{join method}
\index{method!join}
\index{concatenation}

~~~~ {.python .trinket}
>>> t = ['pining', 'for', 'the', 'fjords']
>>> delimiter = ' '
>>> delimiter.join(t)
'pining for the fjords'
~~~~

В данном случае разделителем является символ пробела, таком образом `join`
помещает пробелы между словами. Для объединения строк без пробелов вы можете
использовать пустую строку "" в качестве разделителя.

\index{empty string}
\index{string!empty}

Парсинг строк
-------------

Обычно, кога мы читаем файл, мы хотим выполнить определенные операции со строками в нем, а не просто 
вывести их на экран. Often we want to find the
"interesting lines" and then *parse* the line to find
some interesting *part* of the line. What if we wanted to print out the
day of the week from those lines that start with "From "?

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
~~~~

The `split` method is very effective when faced with this
kind of problem. We can write a small program that looks for lines where
the line starts with "From ", `split` those lines, and then
print out the third word in the line:

\VerbatimInput{../code3/search5.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

The program produces the following output:

    Sat
    Fri
    Fri
    Fri
    ...

Later, we will learn increasingly sophisticated techniques for picking
the lines to work on and how we pull those lines apart to find the exact
bit of information we are looking for.

Объекты и значения
------------------

\index{object}
\index{value}

Если мы выполним следующие операторы присваивания:

~~~~ {.python}
a = 'banana'
b = 'banana'
~~~~

мы знаем, что `a` и `b` оба ссылаются на строку, но мы не знаем ссылаются ли они
на  *одну и ту же* строку. Существует два возможных состояния:

\index{aliasing}

![Variables and Objects](height=0.5in@../images/list1)

В первом случае, `a` и `b` ссылаются на два разных объекта, имеющих 
одно и то же значение. Во втором случае они ссылаются на один и тот же объект.

\index{is operator}
\index{operator!is}

Для проверки, ссылаются ли две переменные на один и тот же объект, мы можем использовать
оператор `is`.

~~~~ {.python .trinket}
>>> a = 'banana'
>>> b = 'banana'
>>> a is b
True
~~~~

В данном случае Python создал единственный строковый объект и  обе переменные 
`a` и `b`ссылаются на него.

Но, когда вы создаете два списка, вы получаете два объекта:

~~~~ {.python .trinket}
>>> a = [1, 2, 3]
>>> b = [1, 2, 3]
>>> a is b
False
~~~~

In this case we would say that the two lists are
*equivalent*, because they have the same elements, but
not *identical*, because they are not the same object. If
two objects are identical, they are also equivalent, but if they are
equivalent, they are not necessarily identical.

\index{equivalence}
\index{identity}

Until now, we have been using "object" and "value" interchangeably, but
it is more precise to say that an object has a value. If you execute
`a = [1,2,3]`, `a` refers to a list object whose
value is a particular sequence of elements. If another list has the same
elements, we would say it has the same value.

\index{object}
\index{value}

Aliasing
--------

\index{aliasing}
\index{reference!aliasing}

If `a` refers to an object and you assign `b = a`,
then both variables refer to the same object:

~~~~ {.python .trinket}
>>> a = [1, 2, 3]
>>> b = a
>>> b is a
True
~~~~

The association of a variable with an object is called a
*reference*. In this example, there are two references to
the same object.

\index{reference}

An object with more than one reference has more than one name, so we say
that the object is *aliased*.

\index{mutability}

If the aliased object is mutable, changes made with one alias affect the
other:

~~~~ {.python}
>>> b[0] = 17
>>> print(a)
[17, 2, 3]
~~~~

Although this behavior can be useful, it is error-prone. In general, it
is safer to avoid aliasing when you are working with mutable objects.

\index{immutability}

For immutable objects like strings, aliasing is not as much of a
problem. In this example:

~~~~ {.python}
a = 'banana'
b = 'banana'
~~~~

it almost never makes a difference whether `a` and
`b` refer to the same string or not.

List arguments
--------------

\index{list!as argument}
\index{argument}
\index{argument!list}
\index{reference}
\index{parameter}

When you pass a list to a function, the function gets a reference to the
list. If the function modifies a list parameter, the caller sees the
change. For example, `delete_head` removes the first element from a
list:

~~~~ {.python}
def delete_head(t):
    del t[0]
~~~~

Here's how it is used:

~~~~ {.python .trinket}
>>> letters = ['a', 'b', 'c']
>>> delete_head(letters)
>>> print(letters)
['b', 'c']
~~~~

The parameter `t` and the variable `letters` are
aliases for the same object.

It is important to distinguish between operations that modify lists and
operations that create new lists. For example, the `append`
method modifies a list, but the `+` operator creates a new
list:

\index{append method}
\index{method!append}
\index{list!concatenation}
\index{concatenation!list}

~~~~ {.python .trinket}
>>> t1 = [1, 2]
>>> t2 = t1.append(3)
>>> print(t1)
[1, 2, 3]
>>> print(t2)
None

>>> t3 = t1 + [3]
>>> print(t3)
[1, 2, 3]
>>> t2 is t3
False
~~~~

This difference is important when you write functions that are supposed
to modify lists. For example, this function *does not* delete the head
of a list:

~~~~ {.python}
def bad_delete_head(t):
    t = t[1:]              # WRONG!
~~~~

The slice operator creates a new list and the assignment makes
`t` refer to it, but none of that has any effect on the list
that was passed as an argument.

\index{slice operator}
\index{operator!slice}

An alternative is to write a function that creates and returns a new
list. For example, `tail` returns all but the first element
of a list:

~~~~ {.python}
def tail(t):
    return t[1:]
~~~~

This function leaves the original list unmodified. Here's how it is
used:

~~~~ {.python .trinket}
>>> letters = ['a', 'b', 'c']
>>> rest = tail(letters)
>>> print(rest)
['b', 'c']
~~~~

**Exercise 1: Write a function called `chop` that takes a list and modifies
it, removing the first and last elements, and returns `None`. Then write a function called `middle` that takes a list and returns a new list that contains all but the first and last elements.**

Debugging
---------

\index{debugging}

Careless use of lists (and other mutable objects) can lead to long hours
of debugging. Here are some common pitfalls and ways to avoid them:

1.  Don't forget that most list methods modify the argument and return
    `None`. This is the opposite of the string methods, which
    return a new string and leave the original alone.

    If you are used to writing string code like this:

    ~~~~ {.python}
    word = word.strip()
    ~~~~

    It is tempting to write list code like this:

    ~~~~ {.python}
    t = t.sort()           # WRONG!
    ~~~~

    \index{sort method}
    \index{method!sort}

    Because `sort` returns `None`, the next
    operation you perform with `t` is likely to fail.

    Before using list methods and operators, you should read the
    documentation carefully and then test them in interactive mode. The
    methods and operators that lists share with other sequences (like
    strings) are documented at:

    [docs.python.org/library/stdtypes.html#common-sequence-operations](https://docs.python.org/library/stdtypes.html#common-sequence-operations)

    The methods and operators that only apply to mutable sequences are
    documented at:

    [docs.python.org/library/stdtypes.html#mutable-sequence-types](https://docs.python.org/library/stdtypes.html#mutable-sequence-types)

2.  Pick an idiom and stick with it.

    \index{idiom}

    Part of the problem with lists is that there are too many ways to do
    things. For example, to remove an element from a list, you can use
    `pop`, `remove`, `del`, or even a
    slice assignment.

    To add an element, you can use the `append` method or the
    `+` operator. But don't forget that these are right:

    ~~~~ {.python}
    t.append(x)
    t = t + [x]
    ~~~~

    And these are wrong:

    ~~~~ {.python}
    t.append([x])          # WRONG!
    t = t.append(x)        # WRONG!
    t + [x]                # WRONG!
    t = t + x              # WRONG!
    ~~~~

    Try out each of these examples in interactive mode to make sure you
    understand what they do. Notice that only the last one causes a
    runtime error; the other three are legal, but they do the wrong
    thing.

3.  Make copies to avoid aliasing.

    \index{aliasing!copying to avoid}
    \index{copy!to avoid aliasing}

    If you want to use a method like `sort` that modifies the
    argument, but you need to keep the original list as well, you can
    make a copy.

    ~~~~ {.python}
    orig = t[:]
    t.sort()
    ~~~~

    In this example you could also use the built-in function
    `sorted`, which returns a new, sorted list and leaves the
    original alone. But in that case you should avoid using
    `sorted` as a variable name!

4.  Lists, `split`, and files

    When we read and parse files, there are many opportunities to
    encounter input that can crash our program so it is a good idea to
    revisit the *guardian* pattern when it comes writing
    programs that read through a file and look for a "needle in the
    haystack".

    Let's revisit our program that is looking for the day of the week on
    the from lines of our file:

    ~~~~
    From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
    ~~~~

    Since we are breaking this line into words, we could dispense with
    the use of `startswith` and simply look at the first word
    of the line to determine if we are interested in the line at all. We
    can use `continue` to skip lines that don't have "From"
    as the first word as follows:

    ~~~~ {.python}
    fhand = open('mbox-short.txt')
    for line in fhand:
        words = line.split()
        if words[0] != 'From' : continue
        print(words[2])
    ~~~~

    This looks much simpler and we don't even need to do the
    `rstrip` to remove the newline at the end of the file.
    But is it better?

    ~~~~
    python search8.py
    Sat
    Traceback (most recent call last):
      File "search8.py", line 5, in <module>
        if words[0] != 'From' : continue
    IndexError: list index out of range
    ~~~~

    It kind of works and we see the day from the first line (Sat), but
    then the program fails with a traceback error. What went wrong? What
    messed-up data caused our elegant, clever, and very Pythonic program
    to fail?

    You could stare at it for a long time and puzzle through it or ask
    someone for help, but the quicker and smarter approach is to add a
    `print` statement. The best place to add the print
    statement is right before the line where the program failed and
    print out the data that seems to be causing the failure.

    Now this approach may generate a lot of lines of output, but at
    least you will immediately have some clue as to the problem at hand.
    So we add a print of the variable `words` right before
    line five. We even add a prefix "Debug:" to the line so we can keep
    our regular output separate from our debug output.

    ~~~~ {.python}
    for line in fhand:
        words = line.split()
        print('Debug:', words)
        if words[0] != 'From' : continue
        print(words[2])
    ~~~~

    When we run the program, a lot of output scrolls off the screen but
    at the end, we see our debug output and the traceback so we know
    what happened just before the traceback.

    ~~~~
    Debug: ['X-DSPAM-Confidence:', '0.8475']
    Debug: ['X-DSPAM-Probability:', '0.0000']
    Debug: []
    Traceback (most recent call last):
      File "search9.py", line 6, in <module>
        if words[0] != 'From' : continue
    IndexError: list index out of range
    ~~~~

    Each debug line is printing the list of words which we get when we
    `split` the line into words. When the program fails, the
    list of words is empty `[]`. If we open the file in a text editor
    and look at the file, at that point it looks as follows:

    ~~~~
    X-DSPAM-Result: Innocent
    X-DSPAM-Processed: Sat Jan  5 09:14:16 2008
    X-DSPAM-Confidence: 0.8475
    X-DSPAM-Probability: 0.0000

    Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
    ~~~~

    The error occurs when our program encounters a blank line! Of course
    there are "zero words" on a blank line. Why didn't we think of that
    when we were writing the code? When the code looks for the first
    word (`word[0]`) to check to see if it matches "From", we get an
    "index out of range" error.

    This of course is the perfect place to add some
    *guardian* code to avoid checking the first word if
    the first word is not there. There are many ways to protect this
    code; we will choose to check the number of words we have before we
    look at the first word:

    ~~~~ {.python}
    fhand = open('mbox-short.txt')
    count = 0
    for line in fhand:
        words = line.split()
        # print('Debug:', words)
        if len(words) == 0 : continue
        if words[0] != 'From' : continue
        print(words[2])
    ~~~~ 

    First we commented out the debug print statement instead of removing
    it, in case our modification fails and we need to debug again. Then
    we added a guardian statement that checks to see if we have zero
    words, and if so, we use `continue` to skip to the next
    line in the file.

    We can think of the two `continue` statements as helping
    us refine the set of lines which are "interesting" to us and which
    we want to process some more. A line which has no words is
    "uninteresting" to us so we skip to the next line. A line which does
    not have "From" as its first word is uninteresting to us so we skip
    it.

    The program as modified runs successfully, so perhaps it is correct.
    Our guardian statement does make sure that the `words[0]`
    will never fail, but perhaps it is not enough. When we are
    programming, we must always be thinking, "What might go wrong?"

**Exercise 2: Figure out which line of the above program is still not
properly guarded. See if you can construct a text file which causes
the program to fail and then modify the program so that the line is
properly guarded and test it to make sure it handles your new text
file.**

**Exercise 3: Rewrite the guardian code in the above example without
two `if` statements. Instead, use a compound logical
expression using the `or` logical operator with a single
`if` statement.**

Glossary
--------

aliasing
:   A circumstance where two or more variables refer to the same object.
\index{aliasing}

delimiter
:   A character or string used to indicate where a string should be
    split.
\index{delimiter}

element
:   One of the values in a list (or other sequence); also called items.
\index{element}

equivalent
:   Having the same value.
\index{equivalent}

index
:   An integer value that indicates an element in a list.
\index{index}
\index{}

identical
:   Being the same object (which implies equivalence).
\index{identical}

list
:   A sequence of values.
\index{list}

list traversal
:   The sequential accessing of each element in a list.
\index{list!traversal}

nested list
:   A list that is an element of another list.
\index{nested list}

object
:   Something a variable can refer to. An object has a type and a value.
\index{object}

reference
:   The association between a variable and its value.
\index{reference}

Exercises
---------

\index{Romeo and Juliet}

**Exercise 4: Download a copy of the file**
[**www.py4e.com/code3/romeo.txt**](http://www.py4e.com/code3/romeo.txt)**.
Write a program to open the file *romeo.txt* and read it line
by line. For each line, split the line into a list of words using the
`split` function. For each word, check to see if the word is already in a list. If the word is not in the list, add it to the list.
When the program completes, sort and print the resulting words in
alphabetical order.**

~~~~
Enter file: romeo.txt
['Arise', 'But', 'It', 'Juliet', 'Who', 'already',
'and', 'breaks', 'east', 'envious', 'fair', 'grief',
'is', 'kill', 'light', 'moon', 'pale', 'sick', 'soft',
'sun', 'the', 'through', 'what', 'window',
'with', 'yonder']
~~~~

**Exercise 5: Write a program to read through the mail box data and when
you find line that starts with "From", you will split the line into
words using the `split` function. We are interested in who
sent the message, which is the second word on the From line.**

~~~~
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
~~~~

**You will parse the From line and print out the second word for each From
line, then you will also count the number of From (not From:) lines and
print out a count at the end. This is a good sample output with a few lines removed:**

~~~~
python fromcount.py
Enter a file name: mbox-short.txt
stephen.marquard@uct.ac.za
louis@media.berkeley.edu
zqian@umich.edu

[...some output removed...]

ray@media.berkeley.edu
cwen@iupui.edu
cwen@iupui.edu
cwen@iupui.edu
There were 27 lines in the file with From as the first word
~~~~

**Exercise 6: Rewrite the program that prompts the user for a list of
numbers and prints out the maximum and minimum of the numbers at the end
when the user enters "done". Write the program to store the numbers the
user enters in a list and use the `max()` and
`min()` functions to compute the maximum and minimum numbers
after the loop completes.**

~~~~
Enter a number: 6
Enter a number: 2
Enter a number: 9
Enter a number: 3
Enter a number: 5
Enter a number: done
Maximum: 9.0
Minimum: 2.0
~~~~
