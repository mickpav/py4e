Переменные, выражения и операторы
======================================

Значения и типы
----------------

\index{value}
\index{type}
\index{string}

*Значение*  - это одно из основных понятий, с которыми работает программа, такое
как символ или число. К значениям можно отнести 1, 2, "Hello, World!"
 
Данные значения принадлежат различным *типам*: 2 - целое число, "Hello, World!" - 
*строка*, так как оно содержит "строку" символов. 
Вы (да и интерпретатор языка) можете идентифицировать строки, так они заключены в кавычки.

\index{quotation mark}

Оператор `print` также работает и с целочисленными значениями. Для запуска интерпретатора
мы используем команду `python`.
~~~~ {.python}
python
>>> print(4)
4
~~~~

Если вы не уверены, к какому типу относится значение, интерпретатор вам подскажет.

~~~~ {.python .trinket height="160"}
>>> type('Hello, World!')
<class 'str'>
>>> type(17)
<class 'int'>
~~~~

Не удивительно, но строки отноятся к типу `str` и целые числа принадлежат к
типу  `int`. Менее очевидно, числа с десятичной точкой относятся к типу, который 
называется `float`, так как данные числа представляются в формате с так называемой 
*плавающей запятой*.

\index{type}
\index{string type}
\index{class!str}
\index{int type}
\index{class!int}
\index{float type}
\index{class!float}

~~~~ {.python .trinket height="120"}
>>> type(3.2)
<class 'float'>
~~~~

А что насчет значений "17" и "3.2"? Выглядят они как числовые, 
но они заключены в кавычки, следовательно - это строки.

\index{quotation mark}

~~~~ {.python .trinket  height="160"}
>>> type('17')
<class 'str'>
>>> type('3.2')
<class 'str'>
~~~~

Когда вы имеете дело с  большими числовыми значениями, вы можете поддаться 
искушению использовать запятые для разделения групп цифр, например - 1,000,000.
Это будет неправильным написанием значения в языке Python, но также верным вариантом 
будет следующая запись:

~~~~ {.python .trinket height="120"}
>>> print(1,000,000)
1 0 0
~~~~

Стоп, но это же совсем не то, что мы ожидали увидеть! Python интерпретирует
1,000,000 как последовательность целых чисел, разделенных запятыми, которую 
он и выводит разделенную пробелами.

\index{semantic error}
\index{error!semantic}
\index{error message}

Перед вами первый пример семантической ошибки: код выполняется без ошибки,но он 
и не выполняет то, для чего был написан.

Переменные
---------

\index{variable}
\index{assignment statement}
\index{statement!assignment}

Одним из самых сильных свойств языка программирования является 
способность манипулировать *переменными*.
Переменная  - это имя, которое ссылается на значение.

*Оператор присваивания* создает новую переменные и дает им 
значения:

~~~~ {.python}
>>> message = 'And now for something completely different'
>>> n = 17
>>> pi = 3.1415926535897931
~~~~

В данном примере происхоит три присваивания. Первое - строковое значение
присваивается переменной `message`; второе присваивает целочисленное значение
17 переменной `n`; в третьем - приблизительное значение числа $\pi$ переменной `pi`.

Для вывода значения переменной вы можете использовать команду print:

~~~~ {.python}
>>> print(n)
17
>>> print(pi)
3.141592653589793
~~~~

Типом переменной является тип значения, но кторое она ссылается.

~~~~ {.python}
>>> type(message)
<class 'str'>
>>> type(n)
<class 'int'>
>>> type(pi)
<class 'float'>
~~~~

Имена переменных и ключевые слова
---------------------------

\index{keyword}

В целом программисты выбирают для переменных значимые имена и документируют,
для чего они используются.

Имена переменных могут быть произвольной длины. Они могут содержать как символы, так и цифры, 
но они не могут начинаться с цифры. Вполне нормальным считается использоваание заглавных букв,
но хорошим тоном считается именование переменной с прописной буквы (почему, вы узнаете позже).

Символ подчеркивания ( \_ ) может использоваться в имени переменной. Очень часто он используется
в именах переменных, состоящих из нескольких слов, таких как `my_name` или
`airspeed_of_unladen_swallow`. Имена переменных могут начинаться с символа подчеркивания, 
но в основном мы стараемся этого избегать, если только не разрабатываем библиотеку, которой 
будет пользоваться кто-то другой.

\index{underscore character}

Если вы попытаетесь присвоить переменной некорректное имя, 
вы получите синтаксическую ошибку:

~~~~ {.python .trinket height="450"}
>>> 76trombones = 'big parade'
SyntaxError: invalid syntax
>>> more@ = 1000000
SyntaxError: invalid syntax
>>> class = 'Advanced Theoretical Zymurgy'
SyntaxError: invalid syntax
~~~~

`76trombones`  - некорректное имя, так как начианется с цифры.
`more@`  - являтеся также некорректным, так как содержит недопустимый 
символ - @. А что не так с именем `class`?

На самом деле `class` - это одно из *ключевых* слов языка Python.
Интерпретатор использует ключевые слова для распознавания структуры программы
и поэтому их нельзя использовать в качестве имен переменных.

\index{keyword}

В языке Python зарезервировано 35 ключевых слов:

~~~~
and       del       from      None      True
as        elif      global    nonlocal  try
assert    else      if        not       while
break     except    import    or        with
class     False     in        pass      yield
continue  finally   is        raise     async
def       for       lambda    return    await
~~~~

Возможно, вам захочется держать этот список под рукой. Если интерпретатор
Python жалуется на одно из имен переменных и вы не знаете почему, посмотрите,
может быть оно из этого списка?

Команды
----------

*Команда* - фрагмент кода, который может выполнить интерепретатор Python. 
Мы уже видели два типа команд: вывод значения выражения и присваивание.

\index{statement}
\index{interactive mode}
\index{script mode}

Если вы вводите команду в интерактивном режиме, интерпретатор исполняет ее
и выводит результат (если он есть).

Скрипт обычно содержит последовательность команд. Если их больше, чем одна, результаты выводятся 
один за другим по мере исполнения.

Например, следующая программа

~~~~ {.python}
print(1)
x = 2
print(x)
~~~~

выведет следующее:

~~~~
1
2
~~~~

Оператор присваивания не выводит ничего на экран.

Операторы и операнды
----------------------

\index{operator, arithmetic}
\index{arithmetic operator}
\index{operand}
\index{expression}

*Операторами* являются специальные символы, которые использубтся для организации вычислений, таких как 
сложение или умножени. Значения, к которым применяются операторы, называются *операнды*. 

Операторы `+`, `-`, `*`, `/`, и
`**` выполняют сложение, вычитание, умножение, деление и возведение в степень, 
как показано в следующих примерах:

~~~~ {.python}
20+32
hour-1
hour*60+minute
minute/60
5**2
(5+9)*(15-7)
~~~~

В версиях Python 2.х и 3.х существуют различия при использовании оператора деления.  
В Python 3.x, результатом деления всегда будет вещественное число:

~~~~ {.python .trinket height="160"}
>>> minute = 59
>>> minute/60
0.9833333333333333
~~~~

Оператор деления в Python 2.0 делит два целых числа и результат преобразует в целое: 

~~~~ {.python}
>>> minute = 59
>>> minute/60
0
~~~~

Чтобы получить такой же результат в  Python 3.х, необходимо использовать целочисленное деление ( `//` ) .

~~~~ {.python .trinket  height="160"}
>>> minute = 59
>>> minute//60
0
~~~~

In Python 3.0 integer division functions much more as you would expect
if you entered the expression on a calculator.

\index{Python 3.0}
\index{Python 2.0}
\index{floating-point division}
\index{division!floating-point}

Выражения
-----------

*Выражение* - это комбинация значений, переменных и операторов. Значение само по
себе считается выражением, то же самое относится к переменным, соответственно, следующие
записи будут являться корректными выражениями (предположим, что переменной `x` было присвоено значение):

\index{expression}
\index{evaluate}

~~~~ {.python}
17
x
x + 17
~~~~

Если вы введете выражение в интерактивном режиме, интерпретатор *обработает* его и 
выведет результат:

~~~~ {.python}
>>> 1 + 1
2
~~~~

Но в скрипте выражение само по себе ничего не делает! Это является очень частой причиной путаницы у
начинающих.

**Упражнение 1: Наберите следующие команды в интерпретаторе Python и посмотрите на результат их выполнения:**

~~~~ {.python}
5
x = 5
x + 1
~~~~

Порядок операций
-------------------

\index{order of operations}
\index{rules of precedence}
\index{PEMDAS}

Когла в одном выражении встречается более, чем один оператор, порядок обработки
строится в соответствии с *правилами приоритета*. 
Для математических операторов Python следует математическим соглашениям. Для того, 
чтобы запомнить эти правила используется сокращение *PEMDAS* (актуально для 
англоязычной версии):

\index{parentheses!overriding precedence}

-   *С*кобки имеют самый высокий приоритет и могут быть использованы для того, 
чтобы полностью изменить порядок вычисления выражения. Так как выражения в скобках
обрабатываются в первую очередь, `2 * (3-1)` будет равно 4, и  `(1+1)**(5-2)` будет равно 8. 
Также вы можете использовать скобки для того, чтобы улучшить читабельность, например
`(minute * 100) / 60`, даже есали это не влияет на конечный результат.

-   *В*озведение в степень является следующим по важности приоритетом, поэтому 
    `2**1+1` будет равно 3, а не  4, и `3*1**3` будет равно 3, а не 27.

-   *У*множение и  *д*еление имеют равный приоритет, который является более высоким,
    чем  *С*ложение и *В*ычитание, которые в свою очередь имеют равный приоритет.
    Поэтому `2*3-1` будет равно 5, а не  4, и `6+4/2` будет равно 8, а не 5.

-   Операторы с равным приоритетом обрабатываются слева направо.
    Отсюда, значением выражения  `5-3-1` будет 1, а не 3, так как 
    `5-3` происходит в первую очередь и  `1` вычитается из 2.

При наличии сомнений всегда используйте скобки в выражениях, чтобы вычисления
проиводились в том порядке, который вам нужен.

Modulus operator
----------------

\index{modulus operator}
\index{operator!modulus}

The *modulus operator* works on integers and yields the
remainder when the first operand is divided by the second. In Python,
the modulus operator is a percent sign (`%`). The syntax is the same as
for other operators:

~~~~ {.python .trinket height="240"}
>>> quotient = 7 // 3
>>> print(quotient)
2
>>> remainder = 7 % 3
>>> print(remainder)
1
~~~~

So 7 divided by 3 is 2 with 1 left over.

The modulus operator turns out to be surprisingly useful. For example,
you can check whether one number is divisible by another: if `x %
y` is zero, then `x` is divisible by `y`.

\index{divisibility}

You can also extract the right-most digit or digits from a number. For
example, `x % 10` yields the right-most digit of
`x` (in base 10). Similarly, `x % 100` yields the
last two digits.

Операции со строками
-----------------

\index{string!operation}
\index{operator!string}

Оператор `+` работает со строковыми значениями, но это не сложение в математическом 
смысле. Вместо этого выполняется *конкатенация*, которая подразумевает объединение строк. 
Например:

\index{concatenation}

~~~~ {.python}
>>> first = 10
>>> second = 15
>>> print(first+second)
25
>>> first = '100'
>>> second = '150'
>>> print(first + second)
100150
~~~~

Оператор `*` таже работает со строками, производя умножение содержимого строки на целое число. 
Например:

~~~~ {.python}
>>> first = 'Test '
>>> second = 3
>>> print(first * second)
Test Test Test
~~~~

Пользовательский ввод данных
-------------------------

\index{keyboard input}

Иногда бывает необходимо получить значение переменной от пользователя с помощью клавиатуры.
Для этого в Python используется встроенная функция`input`, которая получает ввод в клавиатуры.
^[В Python версии 2.0, эта функция называлась `raw_input`.]. 
При вызове данной функции, программа приостанавливается и ожидает, пока пользователь не введет
какие-либо данные с клавиатуры. После того, как пользователь ввел данные и нажал `Enter`,
выполнение программы возобновляется и `input` возвращает значение, введенное пользователем в виде строки.

\index{Python 2.0}

~~~~ {.python}
>>> inp = input()
Some silly stuff
>>> print(inp)
Some silly stuff
~~~~

Перед тем, как запрашивать у пользователя данные, хорошей идеей было бы вывести подсказку на то,
какую информацию необходимо ввести. Вы можете передать строку функции `input` для вывода подсказки пользователю:

\index{prompt}

~~~~ {.python}
>>> name = input('What is your name?\n')
What is your name?
Chuck
>>> print(name)
Chuck
~~~~

Последовательность `\n` в конце подсказки является командой 
*перевода строки*, специальным символом, который обозначает разрыв строки.
Поэтому ввод пользователя будет происходить под подсказкой.

\index{newline}

Если необходимо, чтобы пользователь ввел числовле значение (целое число),
вы можете попытаться преобразовать введенное значение в тип `int` используя функцию `int()`:

~~~~ {.python}
>>> prompt = 'What...is the airspeed velocity of an unladen swallow?\n'
>>> speed = input(prompt)
What...is the airspeed velocity of an unladen swallow?
17
>>> int(speed)
17
>>> int(speed) + 5
22
~~~~

Но, если пользователь напечатает что-то отличное от строки с числами, вы получите ошибку:

~~~~ {.python}
>>> speed = input(prompt)
What...is the airspeed velocity of an unladen swallow?
What do you mean, an African or a European swallow?
>>> int(speed)
ValueError: invalid literal for int() with base 10:
~~~~

Поже мы узнаем как обрабатывать подобные ошибки.
\index{ValueError}
\index{exception!ValueError}

Комментарии
--------

\index{comment}

По мере того как прогаммы становятся больше и сложнее, их становится труднее читать.
Формальные языки весьма компактыне и очень часто трудо просмотреть фрагмент кода 
и понять что он делает и почему.

По этой причине, хорошим тоном считается добавление примечаний в код программы,
где с помощью естественного языка объясняется, что делает программа.
Такие примечания называются *комментариями*, и в Python они начинаются с символа `#`:

~~~~ {.python}
# compute the percentage of the hour that has elapsed
percentage = (minute * 100) / 60
~~~~

В данном случае комментарий занимает отдельную строку. Вы также можете разместить комментарий
в конце строки команды:

~~~~ {.python}
percentage = (minute * 100) / 60     # percentage of an hour
~~~~

Начиная с символа `#` и до конца строки содержимое игнорируется и не имеет никакого влияния на исполнение программы.

Комментарии особенно полезны, когда они поясняют не совсем очевидные фрагменты кода. 
Хорошим тоном считается такой комментарий, который позволяет понять *что* делает код. Это гораздо 
лучше пояснений *почему*.

Ниже приведенный комментарий является избыточным и бесполезным:

~~~~ {.python}
v = 5     # присвоение v значения 5
~~~~

А этот комментарий содержит полезную информацию, ко                 торой нет в коде:

~~~~ {.python}
v = 5     # скорость в м/с
~~~~

Хорошо выбранные имена для переменных могут несколько убавить необходимость в комментариях,
но, в свою очередь, длинные имена могут затруднить восприятие сложных выражений. 
Поэтому всегда должен быть компромисс

Выбор мнемонических имен дял переменных
--------------------------------

\index{mnemonic}

При условии соблюдения простых правил именования переменных и избегании использования 
зарезервированных слов, у вас есть большой выбор как называть свои переменные.
В самом начале такой выбор может вводить в заблуждение как при чтеии исходного кода, так и при написании
собственных программ. 
Например, следующие три программы идентичны в плане результатов выполнения, но очень сильно различаются в плане 
понимания структуры и выполняемых функций.

~~~~ {.python}
a = 35.0
b = 12.50
c = a * b
print(c)
~~~~

~~~~ {.python}
hours = 35.0
rate = 12.50
pay = hours * rate
print(pay)
~~~~

~~~~ {.python}
x1q3z9ahd = 35.0
x1q3z9afd = 12.50
x1q3p9afd = x1q3z9ahd * x1q3z9afd
print(x1q3p9afd)
~~~~

Интерпретатор Python расценит все три программы как *абсолютно одинаковые*, но люди
будут воспримнимать их совершенно по-разному.
Для человека быстрее всего будет понятно *намерение* второй программы, поскольку программист
выбрал такие имена переменных, которые отражают данные, хранящиеся в них.

We call these wisely chosen variable names "mnemonic variable names".
The word *mnemonic*^[See <https://en.wikipedia.org/wiki/Mnemonic> for an extended
description of the word "mnemonic".] means "memory aid". We choose mnemonic variable
names to help us remember why we created the variable in the first
place.

While this all sounds great, and it is a very good idea to use mnemonic
variable names, mnemonic variable names can get in the way of a
beginning programmer's ability to parse and understand code. This is
because beginning programmers have not yet memorized the reserved words
(there are only 33 of them) and sometimes variables with names that are
too descriptive start to look like part of the language and not just
well-chosen variable names.

Take a quick look at the following Python sample code which loops
through some data. We will cover loops soon, but for now try to just
puzzle through what this means:

~~~~ {.python}
for word in words:
    print(word)
~~~~

What is happening here? Which of the tokens (for, word, in, etc.) are
reserved words and which are just variable names? Does Python understand
at a fundamental level the notion of words? Beginning programmers have
trouble separating what parts of the code *must* be the same as this
example and what parts of the code are simply choices made by the
programmer.

The following code is equivalent to the above code:

~~~~ {.python}
for slice in pizza:
    print(slice)
~~~~

It is easier for the beginning programmer to look at this code and know
which parts are reserved words defined by Python and which parts are
simply variable names chosen by the programmer. It is pretty clear that
Python has no fundamental understanding of pizza and slices and the fact
that a pizza consists of a set of one or more slices.

But if our program is truly about reading data and looking for words in
the data, `pizza` and `slice` are very un-mnemonic
variable names. Choosing them as variable names distracts from the
meaning of the program.

After a pretty short period of time, you will know the most common
reserved words and you will start to see the reserved words jumping out
at you:

<pre>
<b>for</b> word <b>in</b> words<b>:</b>
    <b>print</b>(word)
</pre>

The parts of the code that are defined by Python (`for`,
`in`, `print`, and `:`) are in bold and
the programmer-chosen variables (`word` and
`words`) are not in bold. Many text editors are aware of
Python syntax and will color reserved words differently to give you
clues to keep your variables and reserved words separate. After a while
you will begin to read Python and quickly determine what is a variable
and what is a reserved word.

Отладка
---------

\index{debugging}

At this point, the syntax error you are most likely to make is an
illegal variable name, like `class` and `yield`,
which are keywords, or `odd~job` and `US$`, which contain illegal
characters.

\index{syntax error}
\index{error!syntax}

If you put a space in a variable name, Python thinks it is two operands
without an operator:

~~~~ {.python}
>>> bad name = 5
SyntaxError: invalid syntax
~~~~

~~~~ {.python}
>>> month = 09
  File "<stdin>", line 1
    month = 09
             ^
SyntaxError: invalid token
~~~~

For syntax errors, the error messages don't help much. The most common
messages are `SyntaxError: invalid syntax` and
`SyntaxError: invalid token`, neither of which is very
informative.

\index{error message}
\index{use before def}
\index{exception}
\index{runtime error}
\index{error!runtime}

The runtime error you are most likely to make is a "use before def;"
that is, trying to use a variable before you have assigned a value. This
can happen if you spell a variable name wrong:

~~~~ {.python}
>>> principal = 327.68
>>> interest = principle * rate
NameError: name 'principle' is not defined
~~~~

Имена переменных в Python являются регистрозависимыми, поэтому переменная  `LaTeX` и переменная 
`latex` будут ссылаться на разные данные.

\index{case-sensitivity, variable names}
\index{semantic error}
\index{error!semantic}

At this point, the most likely cause of a semantic error is the order of
operations. For example, to evaluate $1/2\pi$, you might be
tempted to write

~~~~ {.python}
>>> 1.0 / 2.0 * pi
~~~~

But the division happens first, so you would get $\pi / 2$, which is not
the same thing! There is no way for Python to know what you meant to
write, so in this case you don't get an error message; you just get the
wrong answer.

\index{order of operations}

Глоссарий
--------

assignment
:   A statement that assigns a value to a variable.
\index{assignment}

concatenate
:   To join two operands end to end.
\index{concatenation}

comment
:   Information in a program that is meant for other programmers (or
    anyone reading the source code) and has no effect on the execution
    of the program.
\index{comment}

evaluate
:   To simplify an expression by performing the operations in order to
    yield a single value.

expression
:   A combination of variables, operators, and values that represents a
    single result value.
\index{expression}

floating point
:   A type that represents numbers with fractional parts.
\index{floating-point}

integer
:   A type that represents whole numbers.
\index{integer}

keyword
:   A reserved word that is used by the compiler to parse a program; you
    cannot use keywords like `if`, `def`, and
    `while` as variable names.
\index{keyword}

mnemonic
:   A memory aid. We often give variables mnemonic names to help us
    remember what is stored in the variable.
\index{mnemonic}

modulus operator
:   An operator, denoted with a percent sign (`%`), that
    works on integers and yields the remainder when one number is
    divided by another.
\index{modulus operator}
\index{operator!modulus}

operand
:   One of the values on which an operator operates.
\index{operand}

operator
:   A special symbol that represents a simple computation like addition,
    multiplication, or string concatenation.
\index{operator}

rules of precedence
:   The set of rules governing the order in which expressions involving
    multiple operators and operands are evaluated.
\index{rules of precedence}
\index{precedence}

statement
:   A section of code that represents a command or action. So far, the
    statements we have seen are assignments and print expression statement.
\index{statement}

string
:   A type that represents sequences of characters.
\index{string}

type
:   A category of values. The types we have seen so far are integers
    (type `int`), floating-point numbers (type
    `float`), and strings (type `str`).
\index{type}

value
:   One of the basic units of data, like a number or string, that a
    program manipulates.
\index{value}

variable
:   A name that refers to a value.
\index{variable}

Упражнения
---------

**Упражнение 2: Напишите программу, которая использует `input` для запроса имени пользователя
и затем приветствет его.**

~~~~
Enter your name: Chuck
Hello Chuck
~~~~

**Упражнение 3: Напишите программу, которая запрашивает у пользователя количество 
отработанных часов и размер почасовой оплаты и рассчитывыает размер оплаты.**

~~~~
Enter Hours: 35
Enter Rate: 2.75
Pay: 96.25
~~~~

На данном этапе мы не обращаем внимание на то, что итоговая сумма
имеет больше, чем 2 знака после запятойю Если хотите, можете поэкспериментировать
со встроенной функцией Python `round` для того, чтобы округлит полученный ответ
до двух десятичных знаков.

**Упражнение 4: Предположим, что мы выполнили следующие команды присваивания:**

~~~~
width = 17
height = 12.0
~~~~

Для каждого из следующих выражений запишите получившееся значение и его тип.

1.  `width//2`

2.  `width/2.0`

3.  `height/3`

4.  `1 + 2 * 5`

Используйте Python в режиме интерпретатора для проверки ответов .

**Упражнение 5: Напишите программу, которая запрашивает у пользователя температуру
в градусах Цельсия, преобразует значение в градусы Фаренгейта и выводит полученный результат.**

